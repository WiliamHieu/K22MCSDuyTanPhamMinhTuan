#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;

namespace INVENTORY.Data
{
    /// <summary>
    /// The <see cref="System.Data.Linq.DataContext"/> class for the INVENTORY database.
    /// </summary>
    public partial class InventoryDbContext
        : CodeSmith.Data.Linq.DataContextBase, System.Data.Services.IUpdatable
    {
        public static readonly System.Data.Linq.Mapping.MappingSource MappingCache = new System.Data.Linq.Mapping.AttributeMappingSource();

        #region ConnectionString
        
        private const string CONNECTION_NAME = "InventoryConnectionString";
        
        private static volatile string _connectionString;
        
        private static object _connectionLock = new Object();

        /// <summary>The application connection string read from web.config or app.config</summary>
        /// <example>
        /// Add the following key to the "connectionStrings" section of your config:
        /// <code><![CDATA[
        /// <configuration>
        ///     <connectionStrings>
        ///         <add name="InventoryConnectionString"
        ///             connectionString="Data Source=(local);Initial Catalog=DATABASE;Integrated Security=True"
        ///             providerName="System.Data.SqlClient" />
        ///     </connectionStrings>
        /// </configuration>
        /// ]]></code>
        /// </example>
        
        public static string ConnectionString
        {
            get
            {
                if (_connectionString == null)
                {
                    lock (_connectionLock)
                    {
                        if (_connectionString == null)
                            _connectionString = GetDefaultConnectionString();
                    }
                }
                return _connectionString;
            }
        }

        private static string GetDefaultConnectionString()
        {
            var settings = System.Configuration.ConfigurationManager.ConnectionStrings[CONNECTION_NAME];
            if (settings == null)
            {
                string message = string.Format("Could not find the connection string '{0}' in the configuration file.  " +
                       "Please add an entry to connectionStrings section named '{0}'.", CONNECTION_NAME);
                throw new System.Configuration.ConfigurationErrorsException(message);
            }
            return settings.ConnectionString;
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDbContext"/> class.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public InventoryDbContext()
            : base(ConnectionString, MappingCache)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDbContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        [System.Diagnostics.DebuggerNonUserCode]
        public InventoryDbContext(string connection)
            : base(connection, MappingCache)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDbContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        [System.Diagnostics.DebuggerNonUserCode]
        public InventoryDbContext(System.Data.IDbConnection connection)
            : base(connection, MappingCache)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDbContext"/> class.
        /// </summary>
        /// <param name="connection">The connection string.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [System.Diagnostics.DebuggerNonUserCode]
        public InventoryDbContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryDbContext"/> class.
        /// </summary>
        /// <param name="connection">The database connection.</param>
        /// <param name="mappingSource">The mapping source.</param>
        [System.Diagnostics.DebuggerNonUserCode]
        public InventoryDbContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource)
            : base(connection, mappingSource)
        {
            OnCreated();
        }
        #endregion

        #region Tables
        /// <summary>Represents the dbo.DmBoPhan table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmBoPhan> DmBoPhan
        {
            get { return GetTable<INVENTORY.Data.DmBoPhan>(); }
        }

        /// <summary>Represents the dbo.DmChiNhanh table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmChiNhanh> DmChiNhanh
        {
            get { return GetTable<INVENTORY.Data.DmChiNhanh>(); }
        }

        /// <summary>Represents the dbo.DmDonViTinh table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmDonViTinh> DmDonViTinh
        {
            get { return GetTable<INVENTORY.Data.DmDonViTinh>(); }
        }

        /// <summary>Represents the dbo.DmKhoHang table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmKhoHang> DmKhoHang
        {
            get { return GetTable<INVENTORY.Data.DmKhoHang>(); }
        }

        /// <summary>Represents the dbo.DmLoaiVatTu table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmLoaiVatTu> DmLoaiVatTu
        {
            get { return GetTable<INVENTORY.Data.DmLoaiVatTu>(); }
        }

        /// <summary>Represents the dbo.DmNguonKho table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmNguonKho> DmNguonKho
        {
            get { return GetTable<INVENTORY.Data.DmNguonKho>(); }
        }

        /// <summary>Represents the dbo.DmNguonNhap table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmNguonNhap> DmNguonNhap
        {
            get { return GetTable<INVENTORY.Data.DmNguonNhap>(); }
        }

        /// <summary>Represents the dbo.DmNhomVatTu table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.DmNhomVatTu> DmNhomVatTu
        {
            get { return GetTable<INVENTORY.Data.DmNhomVatTu>(); }
        }

        /// <summary>Represents the dbo.HtChucNang table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtChucNang> HtChucNang
        {
            get { return GetTable<INVENTORY.Data.HtChucNang>(); }
        }

        /// <summary>Represents the dbo.HtNguoiDung table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtNguoiDung> HtNguoiDung
        {
            get { return GetTable<INVENTORY.Data.HtNguoiDung>(); }
        }

        /// <summary>Represents the dbo.HtNguoiDungVaiTro table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtNguoiDungVaiTro> HtNguoiDungVaiTro
        {
            get { return GetTable<INVENTORY.Data.HtNguoiDungVaiTro>(); }
        }

        /// <summary>Represents the dbo.HtPhanHe table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtPhanHe> HtPhanHe
        {
            get { return GetTable<INVENTORY.Data.HtPhanHe>(); }
        }

        /// <summary>Represents the dbo.HtQuyenHan table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtQuyenHan> HtQuyenHan
        {
            get { return GetTable<INVENTORY.Data.HtQuyenHan>(); }
        }

        /// <summary>Represents the dbo.HtThietLap table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtThietLap> HtThietLap
        {
            get { return GetTable<INVENTORY.Data.HtThietLap>(); }
        }

        /// <summary>Represents the dbo.HtVaiTro table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.HtVaiTro> HtVaiTro
        {
            get { return GetTable<INVENTORY.Data.HtVaiTro>(); }
        }

        /// <summary>Represents the dbo.KhNhapXuat table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhNhapXuat> KhNhapXuat
        {
            get { return GetTable<INVENTORY.Data.KhNhapXuat>(); }
        }

        /// <summary>Represents the dbo.KhPhieuChuyen table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuChuyen> KhPhieuChuyen
        {
            get { return GetTable<INVENTORY.Data.KhPhieuChuyen>(); }
        }

        /// <summary>Represents the dbo.KhPhieuChuyenCt table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuChuyenCt> KhPhieuChuyenCt
        {
            get { return GetTable<INVENTORY.Data.KhPhieuChuyenCt>(); }
        }

        /// <summary>Represents the dbo.KhPhieuChuyenSp table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuChuyenSp> KhPhieuChuyenSp
        {
            get { return GetTable<INVENTORY.Data.KhPhieuChuyenSp>(); }
        }

        /// <summary>Represents the dbo.KhPhieuNhap table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuNhap> KhPhieuNhap
        {
            get { return GetTable<INVENTORY.Data.KhPhieuNhap>(); }
        }

        /// <summary>Represents the dbo.KhPhieuNhapCt table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuNhapCt> KhPhieuNhapCt
        {
            get { return GetTable<INVENTORY.Data.KhPhieuNhapCt>(); }
        }

        /// <summary>Represents the dbo.KhPhieuNhapNb table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuNhapNb> KhPhieuNhapNb
        {
            get { return GetTable<INVENTORY.Data.KhPhieuNhapNb>(); }
        }

        /// <summary>Represents the dbo.KhPhieuNhapNbCt table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuNhapNbCt> KhPhieuNhapNbCt
        {
            get { return GetTable<INVENTORY.Data.KhPhieuNhapNbCt>(); }
        }

        /// <summary>Represents the dbo.KhPhieuXuat table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuXuat> KhPhieuXuat
        {
            get { return GetTable<INVENTORY.Data.KhPhieuXuat>(); }
        }

        /// <summary>Represents the dbo.KhPhieuXuatCt table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuXuatCt> KhPhieuXuatCt
        {
            get { return GetTable<INVENTORY.Data.KhPhieuXuatCt>(); }
        }

        /// <summary>Represents the dbo.KhPhieuXuatSp table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhPhieuXuatSp> KhPhieuXuatSp
        {
            get { return GetTable<INVENTORY.Data.KhPhieuXuatSp>(); }
        }

        /// <summary>Represents the dbo.KhSanPham table in the underlying database.</summary>
        public System.Data.Linq.Table<INVENTORY.Data.KhSanPham> KhSanPham
        {
            get { return GetTable<INVENTORY.Data.KhSanPham>(); }
        }

        #endregion

        #region Functions
        /// <summary>Method that is mapped to the dbo.Custom_DmLoaiVatTu_Get_DropDown database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_DmLoaiVatTu_Get_DropDown")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomDmLoaiVatTuGetDropDownResult> CustomDmLoaiVatTuGetDropDown(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNhomVatTu", DbType = "uniqueidentifier")] System.Guid? idNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@LoaiGet", DbType = "int")] int? loaiGet)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idNhomVatTu, loaiGet);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomDmLoaiVatTuGetDropDownResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_DmLoaiVatTu_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_DmLoaiVatTu_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomDmLoaiVatTuGetListResult> CustomDmLoaiVatTuGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNhomVatTu", DbType = "uniqueidentifier")] System.Guid? idNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@TrangThai", DbType = "int")] int? trangThai)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idNhomVatTu, trangThai);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomDmLoaiVatTuGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtNgayThang_GetValue database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtNgayThang_GetValue")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNgayThangGetValueResult> CustomHtNgayThangGetValue()
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNgayThangGetValueResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtNguoiDung_Get_DropDown database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtNguoiDung_Get_DropDown")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetDropDownResult> CustomHtNguoiDungGetDropDown(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetDropDownResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtNguoiDung_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtNguoiDung_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetListResult> CustomHtNguoiDungGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdChiNhanh", DbType = "int")] int? idChiNhanh,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdVaiTro", DbType = "int")] int? idVaiTro,
            [System.Data.Linq.Mapping.Parameter(Name = "@HienThi", DbType = "int")] int? hienThi)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idChiNhanh, idKhoHang, idVaiTro, hienThi);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtNguoiDung_Get_ListKhoHang database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtNguoiDung_Get_ListKhoHang")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetListKhoHangResult> CustomHtNguoiDungGetListKhoHang(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNguoiDung", DbType = "int")] int? idNguoiDung)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idNguoiDung);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetListKhoHangResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtNguoiDung_Get_ListVaiTro database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtNguoiDung_Get_ListVaiTro")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetListVaiTroResult> CustomHtNguoiDungGetListVaiTro(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNguoiDung", DbType = "int")] int? idNguoiDung)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idNguoiDung);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtNguoiDungGetListVaiTroResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtQuyenHan_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtQuyenHan_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtQuyenHanGetListResult> CustomHtQuyenHanGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdVaiTro", DbType = "int")] int? idVaiTro)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idVaiTro);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtQuyenHanGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_HtVaiTro_Get_KhoHang database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_HtVaiTro_Get_KhoHang")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtVaiTroGetKhoHangResult> CustomHtVaiTroGetKhoHang(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomHtVaiTroGetKhoHangResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhNhapXuat_Insert_Data database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhNhapXuat_Insert_Data")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomKhNhapXuatInsertData(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@NgayChay", DbType = "date")] System.DateTime? ngayChay)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, ngayChay);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuChuyen_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuChuyen_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuChuyenGetListResult> CustomKhPhieuChuyenGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, tuNgay, denNgay);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuChuyenGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuChuyen_Get_ListChiTiet database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuChuyen_Get_ListChiTiet")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuChuyenGetListChiTietResult> CustomKhPhieuChuyenGetListChiTiet(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuChuyen", DbType = "uniqueidentifier")] System.Guid? idPhieuChuyen)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuChuyen);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuChuyenGetListChiTietResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuNhap_Check_Delete database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuNhap_Check_Delete")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapCheckDeleteResult> CustomKhPhieuNhapCheckDelete(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhap", DbType = "uniqueidentifier")] System.Guid? idPhieuNhap,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdLoaiVatTu", DbType = "uniqueidentifier")] System.Guid? idLoaiVatTu)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuNhap, idLoaiVatTu);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapCheckDeleteResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuNhap_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuNhap_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapGetListResult> CustomKhPhieuNhapGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, tuNgay, denNgay);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuNhap_Get_ListChiTiet database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuNhap_Get_ListChiTiet")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapGetListChiTietResult> CustomKhPhieuNhapGetListChiTiet(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhap", DbType = "uniqueidentifier")] System.Guid? idPhieuNhap)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuNhap);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapGetListChiTietResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuNhap_Get_ListChiTietNb database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuNhap_Get_ListChiTietNb")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapGetListChiTietNbResult> CustomKhPhieuNhapGetListChiTietNb(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhap", DbType = "uniqueidentifier")] System.Guid? idPhieuNhap)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuNhap);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapGetListChiTietNbResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuNhapNb_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuNhapNb_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapNbGetListResult> CustomKhPhieuNhapNbGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapNbGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuNhapNb_Get_ListChiTiet database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuNhapNb_Get_ListChiTiet")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapNbGetListChiTietResult> CustomKhPhieuNhapNbGetListChiTiet(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhapNb", DbType = "uniqueidentifier")] System.Guid? idPhieuNhapNb)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuNhapNb);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuNhapNbGetListChiTietResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuXuat_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuXuat_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuXuatGetListResult> CustomKhPhieuXuatGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, tuNgay, denNgay);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuXuatGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhPhieuXuat_Get_ListChiTiet database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhPhieuXuat_Get_ListChiTiet")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuXuatGetListChiTietResult> CustomKhPhieuXuatGetListChiTiet(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuXuat", DbType = "uniqueidentifier")] System.Guid? idPhieuXuat)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuXuat);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhPhieuXuatGetListChiTietResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhSanPham_Get_List database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhSanPham_Get_List")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhSanPhamGetListResult> CustomKhSanPhamGetList(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNhomVatTu", DbType = "uniqueidentifier")] System.Guid? idNhomVatTu)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idNhomVatTu);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhSanPhamGetListResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_KhSanPham_Get_SoLuong database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_KhSanPham_Get_SoLuong")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhSanPhamGetSoLuongResult> CustomKhSanPhamGetSoLuong(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdLoaiVatTu", DbType = "uniqueidentifier")] System.Guid? idLoaiVatTu)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idLoaiVatTu);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomKhSanPhamGetSoLuongResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpHangChuyen database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpHangChuyen")]
        [System.Data.Linq.Mapping.ResultType(typeof(INVENTORY.Data.CustomRpHangChuyenResult1))]
        [System.Data.Linq.Mapping.ResultType(typeof(INVENTORY.Data.CustomRpHangChuyenResult2))]
        public System.Data.Linq.IMultipleResults CustomRpHangChuyen(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoNhan", DbType = "int")] int? idKhoNhan,
            [System.Data.Linq.Mapping.Parameter(Name = "@ListNhomVatTu", DbType = "varchar(MAX)")] string listNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@LoaiBaoCao", DbType = "int")] int? loaiBaoCao)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, idKhoNhan, listNhomVatTu, tuNgay, denNgay, loaiBaoCao);

            return ((System.Data.Linq.IMultipleResults)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpHangLuuKho database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpHangLuuKho")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomRpHangLuuKhoResult> CustomRpHangLuuKho(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@ListNhomVatTu", DbType = "varchar(MAX)")] string listNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@NgayLuuKho", DbType = "int")] int? ngayLuuKho)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, listNhomVatTu, ngayLuuKho);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomRpHangLuuKhoResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpHangNhap database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpHangNhap")]
        [System.Data.Linq.Mapping.ResultType(typeof(INVENTORY.Data.CustomRpHangNhapResult1))]
        [System.Data.Linq.Mapping.ResultType(typeof(INVENTORY.Data.CustomRpHangNhapResult2))]
        public System.Data.Linq.IMultipleResults CustomRpHangNhap(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNguonNhap", DbType = "uniqueidentifier")] System.Guid? idNguonNhap,
            [System.Data.Linq.Mapping.Parameter(Name = "@ListNhomVatTu", DbType = "varchar(MAX)")] string listNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@LoaiNhap", DbType = "int")] int? loaiNhap,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@LoaiBaoCao", DbType = "int")] int? loaiBaoCao)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, idNguonNhap, listNhomVatTu, loaiNhap, tuNgay, denNgay, loaiBaoCao);

            return ((System.Data.Linq.IMultipleResults)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpHangTonTheoKho database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpHangTonTheoKho")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomRpHangTonTheoKhoResult> CustomRpHangTonTheoKho(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@ListNhomVatTu", DbType = "varchar(MAX)")] string listNhomVatTu)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, listNhomVatTu);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomRpHangTonTheoKhoResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpHangXuat database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpHangXuat")]
        [System.Data.Linq.Mapping.ResultType(typeof(INVENTORY.Data.CustomRpHangXuatResult1))]
        [System.Data.Linq.Mapping.ResultType(typeof(INVENTORY.Data.CustomRpHangXuatResult2))]
        public System.Data.Linq.IMultipleResults CustomRpHangXuat(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdBoPhan", DbType = "uniqueidentifier")] System.Guid? idBoPhan,
            [System.Data.Linq.Mapping.Parameter(Name = "@ListNhomVatTu", DbType = "varchar(MAX)")] string listNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@LoaiBaoCao", DbType = "int")] int? loaiBaoCao)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, idBoPhan, listNhomVatTu, tuNgay, denNgay, loaiBaoCao);

            return ((System.Data.Linq.IMultipleResults)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpNhapXuatTon database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpNhapXuatTon")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomRpNhapXuatTonResult> CustomRpNhapXuatTon(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@ListNhomVatTu", DbType = "varchar(MAX)")] string listNhomVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, listNhomVatTu, tuNgay, denNgay);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomRpNhapXuatTonResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.Custom_RpNhapXuatTonChiTiet database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.Custom_RpNhapXuatTonChiTiet")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomRpNhapXuatTonChiTiet(
            [System.Data.Linq.Mapping.Parameter(Name = "@ListKhoHang", DbType = "varchar(100)")] string listKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdLoaiVatTu", DbType = "uniqueidentifier")] System.Guid? idLoaiVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@TuNgay", DbType = "date")] System.DateTime? tuNgay,
            [System.Data.Linq.Mapping.Parameter(Name = "@DenNgay", DbType = "date")] System.DateTime? denNgay)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, listKhoHang, idLoaiVatTu, tuNgay, denNgay);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_DmLoaiVatTu_Delete database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_DmLoaiVatTu_Delete")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenDmLoaiVatTuDelete(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdLoaiVatTu", DbType = "uniqueidentifier")] System.Guid? idLoaiVatTu,
            [System.Data.Linq.Mapping.Parameter(Name = "@DeleteAll", DbType = "bit")] bool? deleteAll)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idLoaiVatTu, deleteAll);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuChuyen_Delete database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuChuyen_Delete")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuChuyenDelete(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuChuyen", DbType = "uniqueidentifier")] System.Guid? idPhieuChuyen,
            [System.Data.Linq.Mapping.Parameter(Name = "@DeleteAll", DbType = "bit")] bool? deleteAll)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idPhieuChuyen, deleteAll);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuChuyen_Get_SoPhieu database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuChuyen_Get_SoPhieu")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuChuyenGetSoPhieuResult> CustomGenKhPhieuChuyenGetSoPhieu(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MaKhoHang", DbType = "nvarchar(5)")] string maKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MonthYear", DbType = "varchar(4)")] string monthYear)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, maKhoHang, monthYear);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuChuyenGetSoPhieuResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuChuyenCt_Update database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuChuyenCt_Update")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuChuyenCtUpdate(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuChuyen", DbType = "uniqueidentifier")] System.Guid? idPhieuChuyen,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhapNb", DbType = "uniqueidentifier")] System.Guid? idPhieuNhapNb)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idPhieuChuyen, idPhieuNhapNb);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuNhap_Delete database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuNhap_Delete")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuNhapDelete(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhap", DbType = "uniqueidentifier")] System.Guid? idPhieuNhap,
            [System.Data.Linq.Mapping.Parameter(Name = "@DeleteAll", DbType = "bit")] bool? deleteAll)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idPhieuNhap, deleteAll);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuNhap_Get_SoPhieu database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuNhap_Get_SoPhieu")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuNhapGetSoPhieuResult> CustomGenKhPhieuNhapGetSoPhieu(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MaKhoHang", DbType = "nvarchar(5)")] string maKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MonthYear", DbType = "varchar(4)")] string monthYear)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, maKhoHang, monthYear);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuNhapGetSoPhieuResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuNhap_Update database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuNhap_Update")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuNhapUpdate(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhap", DbType = "uniqueidentifier")] System.Guid? idPhieuNhap,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdNguonNhap", DbType = "uniqueidentifier")] System.Guid? idNguonNhap)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuNhap, idNguonNhap);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuNhapNb_Delete database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuNhapNb_Delete")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuNhapNbDelete(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuNhapNb", DbType = "uniqueidentifier")] System.Guid? idPhieuNhapNb,
            [System.Data.Linq.Mapping.Parameter(Name = "@DeleteAll", DbType = "bit")] bool? deleteAll)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idPhieuNhapNb, deleteAll);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuNhapNb_Get_SoPhieu database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuNhapNb_Get_SoPhieu")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuNhapNbGetSoPhieuResult> CustomGenKhPhieuNhapNbGetSoPhieu(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MonthYear", DbType = "varchar(4)")] string monthYear)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, monthYear);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuNhapNbGetSoPhieuResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuXuat_Delete database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuXuat_Delete")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuXuatDelete(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuXuat", DbType = "uniqueidentifier")] System.Guid? idPhieuXuat,
            [System.Data.Linq.Mapping.Parameter(Name = "@DeleteAll", DbType = "bit")] bool? deleteAll)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idPhieuXuat, deleteAll);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuXuat_Get_SoPhieu database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuXuat_Get_SoPhieu")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuXuatGetSoPhieuResult> CustomGenKhPhieuXuatGetSoPhieu(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MaKhoHang", DbType = "nvarchar(5)")] string maKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@MonthYear", DbType = "varchar(4)")] string monthYear)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, maKhoHang, monthYear);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.CustomGenKhPhieuXuatGetSoPhieuResult>)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.CustomGen_KhPhieuXuatCt_Update database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.CustomGen_KhPhieuXuatCt_Update")]
        [return: System.Data.Linq.Mapping.Parameter(DbType = "int")]
        public int CustomGenKhPhieuXuatCtUpdate(
            [System.Data.Linq.Mapping.Parameter(Name = "@IdKhoHang", DbType = "int")] int? idKhoHang,
            [System.Data.Linq.Mapping.Parameter(Name = "@IdPhieuXuat", DbType = "uniqueidentifier")] System.Guid? idPhieuXuat)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, idKhoHang, idPhieuXuat);

            return ((int)(result.ReturnValue));
        }

        /// <summary>Method that is mapped to the dbo.ImplementNamingStandard database procedure.</summary>
        /// <returns></returns>
        [System.Data.Linq.Mapping.Function(Name = "dbo.ImplementNamingStandard")]
        public System.Data.Linq.ISingleResult<INVENTORY.Data.ImplementNamingStandardResult> ImplementNamingStandard(
            [System.Data.Linq.Mapping.Parameter(Name = "@SELECT_Only", DbType = "bit")] bool? sELECTOnly,
            [System.Data.Linq.Mapping.Parameter(Name = "@PrimaryKeys", DbType = "bit")] bool? primaryKeys,
            [System.Data.Linq.Mapping.Parameter(Name = "@ForeignKeys", DbType = "bit")] bool? foreignKeys,
            [System.Data.Linq.Mapping.Parameter(Name = "@Indexes", DbType = "bit")] bool? indexes,
            [System.Data.Linq.Mapping.Parameter(Name = "@UniqueConstraints", DbType = "bit")] bool? uniqueConstraints,
            [System.Data.Linq.Mapping.Parameter(Name = "@DefaultConstraints", DbType = "bit")] bool? defaultConstraints,
            [System.Data.Linq.Mapping.Parameter(Name = "@CheckConstraints", DbType = "bit")] bool? checkConstraints)
        {
            var methodInfo = (System.Reflection.MethodInfo)System.Reflection.MethodInfo.GetCurrentMethod();
            var result = this.ExecuteMethodCall(this, methodInfo, sELECTOnly, primaryKeys, foreignKeys, indexes, uniqueConstraints, defaultConstraints, checkConstraints);

            return ((System.Data.Linq.ISingleResult<INVENTORY.Data.ImplementNamingStandardResult>)(result.ReturnValue));
        }

        #endregion

        #region Extensibility Method Definitions
        /// <summary>Called after this instance is created.</summary>
        partial void OnCreated();

        /// <summary>Called before a <see cref="DmBoPhan"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmBoPhan(INVENTORY.Data.DmBoPhan instance);

        /// <summary>Called before a <see cref="DmBoPhan"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmBoPhan(INVENTORY.Data.DmBoPhan instance);

        /// <summary>Called before a <see cref="DmBoPhan"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmBoPhan(INVENTORY.Data.DmBoPhan instance);

        /// <summary>Called before a <see cref="DmChiNhanh"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmChiNhanh(INVENTORY.Data.DmChiNhanh instance);

        /// <summary>Called before a <see cref="DmChiNhanh"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmChiNhanh(INVENTORY.Data.DmChiNhanh instance);

        /// <summary>Called before a <see cref="DmChiNhanh"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmChiNhanh(INVENTORY.Data.DmChiNhanh instance);

        /// <summary>Called before a <see cref="DmDonViTinh"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmDonViTinh(INVENTORY.Data.DmDonViTinh instance);

        /// <summary>Called before a <see cref="DmDonViTinh"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmDonViTinh(INVENTORY.Data.DmDonViTinh instance);

        /// <summary>Called before a <see cref="DmDonViTinh"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmDonViTinh(INVENTORY.Data.DmDonViTinh instance);

        /// <summary>Called before a <see cref="DmKhoHang"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmKhoHang(INVENTORY.Data.DmKhoHang instance);

        /// <summary>Called before a <see cref="DmKhoHang"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmKhoHang(INVENTORY.Data.DmKhoHang instance);

        /// <summary>Called before a <see cref="DmKhoHang"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmKhoHang(INVENTORY.Data.DmKhoHang instance);

        /// <summary>Called before a <see cref="DmLoaiVatTu"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmLoaiVatTu(INVENTORY.Data.DmLoaiVatTu instance);

        /// <summary>Called before a <see cref="DmLoaiVatTu"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmLoaiVatTu(INVENTORY.Data.DmLoaiVatTu instance);

        /// <summary>Called before a <see cref="DmLoaiVatTu"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmLoaiVatTu(INVENTORY.Data.DmLoaiVatTu instance);

        /// <summary>Called before a <see cref="DmNguonKho"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmNguonKho(INVENTORY.Data.DmNguonKho instance);

        /// <summary>Called before a <see cref="DmNguonKho"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmNguonKho(INVENTORY.Data.DmNguonKho instance);

        /// <summary>Called before a <see cref="DmNguonKho"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmNguonKho(INVENTORY.Data.DmNguonKho instance);

        /// <summary>Called before a <see cref="DmNguonNhap"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmNguonNhap(INVENTORY.Data.DmNguonNhap instance);

        /// <summary>Called before a <see cref="DmNguonNhap"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmNguonNhap(INVENTORY.Data.DmNguonNhap instance);

        /// <summary>Called before a <see cref="DmNguonNhap"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmNguonNhap(INVENTORY.Data.DmNguonNhap instance);

        /// <summary>Called before a <see cref="DmNhomVatTu"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertDmNhomVatTu(INVENTORY.Data.DmNhomVatTu instance);

        /// <summary>Called before a <see cref="DmNhomVatTu"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateDmNhomVatTu(INVENTORY.Data.DmNhomVatTu instance);

        /// <summary>Called before a <see cref="DmNhomVatTu"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteDmNhomVatTu(INVENTORY.Data.DmNhomVatTu instance);

        /// <summary>Called before a <see cref="HtChucNang"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtChucNang(INVENTORY.Data.HtChucNang instance);

        /// <summary>Called before a <see cref="HtChucNang"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtChucNang(INVENTORY.Data.HtChucNang instance);

        /// <summary>Called before a <see cref="HtChucNang"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtChucNang(INVENTORY.Data.HtChucNang instance);

        /// <summary>Called before a <see cref="HtNguoiDung"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtNguoiDung(INVENTORY.Data.HtNguoiDung instance);

        /// <summary>Called before a <see cref="HtNguoiDung"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtNguoiDung(INVENTORY.Data.HtNguoiDung instance);

        /// <summary>Called before a <see cref="HtNguoiDung"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtNguoiDung(INVENTORY.Data.HtNguoiDung instance);

        /// <summary>Called before a <see cref="HtNguoiDungVaiTro"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtNguoiDungVaiTro(INVENTORY.Data.HtNguoiDungVaiTro instance);

        /// <summary>Called before a <see cref="HtNguoiDungVaiTro"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtNguoiDungVaiTro(INVENTORY.Data.HtNguoiDungVaiTro instance);

        /// <summary>Called before a <see cref="HtNguoiDungVaiTro"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtNguoiDungVaiTro(INVENTORY.Data.HtNguoiDungVaiTro instance);

        /// <summary>Called before a <see cref="HtPhanHe"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtPhanHe(INVENTORY.Data.HtPhanHe instance);

        /// <summary>Called before a <see cref="HtPhanHe"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtPhanHe(INVENTORY.Data.HtPhanHe instance);

        /// <summary>Called before a <see cref="HtPhanHe"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtPhanHe(INVENTORY.Data.HtPhanHe instance);

        /// <summary>Called before a <see cref="HtQuyenHan"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtQuyenHan(INVENTORY.Data.HtQuyenHan instance);

        /// <summary>Called before a <see cref="HtQuyenHan"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtQuyenHan(INVENTORY.Data.HtQuyenHan instance);

        /// <summary>Called before a <see cref="HtQuyenHan"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtQuyenHan(INVENTORY.Data.HtQuyenHan instance);

        /// <summary>Called before a <see cref="HtThietLap"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtThietLap(INVENTORY.Data.HtThietLap instance);

        /// <summary>Called before a <see cref="HtThietLap"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtThietLap(INVENTORY.Data.HtThietLap instance);

        /// <summary>Called before a <see cref="HtThietLap"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtThietLap(INVENTORY.Data.HtThietLap instance);

        /// <summary>Called before a <see cref="HtVaiTro"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertHtVaiTro(INVENTORY.Data.HtVaiTro instance);

        /// <summary>Called before a <see cref="HtVaiTro"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateHtVaiTro(INVENTORY.Data.HtVaiTro instance);

        /// <summary>Called before a <see cref="HtVaiTro"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteHtVaiTro(INVENTORY.Data.HtVaiTro instance);

        /// <summary>Called before a <see cref="KhNhapXuat"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhNhapXuat(INVENTORY.Data.KhNhapXuat instance);

        /// <summary>Called before a <see cref="KhNhapXuat"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhNhapXuat(INVENTORY.Data.KhNhapXuat instance);

        /// <summary>Called before a <see cref="KhNhapXuat"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhNhapXuat(INVENTORY.Data.KhNhapXuat instance);

        /// <summary>Called before a <see cref="KhPhieuChuyen"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuChuyen(INVENTORY.Data.KhPhieuChuyen instance);

        /// <summary>Called before a <see cref="KhPhieuChuyen"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuChuyen(INVENTORY.Data.KhPhieuChuyen instance);

        /// <summary>Called before a <see cref="KhPhieuChuyen"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuChuyen(INVENTORY.Data.KhPhieuChuyen instance);

        /// <summary>Called before a <see cref="KhPhieuChuyenCt"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuChuyenCt(INVENTORY.Data.KhPhieuChuyenCt instance);

        /// <summary>Called before a <see cref="KhPhieuChuyenCt"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuChuyenCt(INVENTORY.Data.KhPhieuChuyenCt instance);

        /// <summary>Called before a <see cref="KhPhieuChuyenCt"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuChuyenCt(INVENTORY.Data.KhPhieuChuyenCt instance);

        /// <summary>Called before a <see cref="KhPhieuChuyenSp"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuChuyenSp(INVENTORY.Data.KhPhieuChuyenSp instance);

        /// <summary>Called before a <see cref="KhPhieuChuyenSp"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuChuyenSp(INVENTORY.Data.KhPhieuChuyenSp instance);

        /// <summary>Called before a <see cref="KhPhieuChuyenSp"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuChuyenSp(INVENTORY.Data.KhPhieuChuyenSp instance);

        /// <summary>Called before a <see cref="KhPhieuNhap"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuNhap(INVENTORY.Data.KhPhieuNhap instance);

        /// <summary>Called before a <see cref="KhPhieuNhap"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuNhap(INVENTORY.Data.KhPhieuNhap instance);

        /// <summary>Called before a <see cref="KhPhieuNhap"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuNhap(INVENTORY.Data.KhPhieuNhap instance);

        /// <summary>Called before a <see cref="KhPhieuNhapCt"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuNhapCt(INVENTORY.Data.KhPhieuNhapCt instance);

        /// <summary>Called before a <see cref="KhPhieuNhapCt"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuNhapCt(INVENTORY.Data.KhPhieuNhapCt instance);

        /// <summary>Called before a <see cref="KhPhieuNhapCt"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuNhapCt(INVENTORY.Data.KhPhieuNhapCt instance);

        /// <summary>Called before a <see cref="KhPhieuNhapNb"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuNhapNb(INVENTORY.Data.KhPhieuNhapNb instance);

        /// <summary>Called before a <see cref="KhPhieuNhapNb"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuNhapNb(INVENTORY.Data.KhPhieuNhapNb instance);

        /// <summary>Called before a <see cref="KhPhieuNhapNb"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuNhapNb(INVENTORY.Data.KhPhieuNhapNb instance);

        /// <summary>Called before a <see cref="KhPhieuNhapNbCt"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuNhapNbCt(INVENTORY.Data.KhPhieuNhapNbCt instance);

        /// <summary>Called before a <see cref="KhPhieuNhapNbCt"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuNhapNbCt(INVENTORY.Data.KhPhieuNhapNbCt instance);

        /// <summary>Called before a <see cref="KhPhieuNhapNbCt"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuNhapNbCt(INVENTORY.Data.KhPhieuNhapNbCt instance);

        /// <summary>Called before a <see cref="KhPhieuXuat"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuXuat(INVENTORY.Data.KhPhieuXuat instance);

        /// <summary>Called before a <see cref="KhPhieuXuat"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuXuat(INVENTORY.Data.KhPhieuXuat instance);

        /// <summary>Called before a <see cref="KhPhieuXuat"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuXuat(INVENTORY.Data.KhPhieuXuat instance);

        /// <summary>Called before a <see cref="KhPhieuXuatCt"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuXuatCt(INVENTORY.Data.KhPhieuXuatCt instance);

        /// <summary>Called before a <see cref="KhPhieuXuatCt"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuXuatCt(INVENTORY.Data.KhPhieuXuatCt instance);

        /// <summary>Called before a <see cref="KhPhieuXuatCt"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuXuatCt(INVENTORY.Data.KhPhieuXuatCt instance);

        /// <summary>Called before a <see cref="KhPhieuXuatSp"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhPhieuXuatSp(INVENTORY.Data.KhPhieuXuatSp instance);

        /// <summary>Called before a <see cref="KhPhieuXuatSp"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhPhieuXuatSp(INVENTORY.Data.KhPhieuXuatSp instance);

        /// <summary>Called before a <see cref="KhPhieuXuatSp"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhPhieuXuatSp(INVENTORY.Data.KhPhieuXuatSp instance);

        /// <summary>Called before a <see cref="KhSanPham"/> is inserted.</summary>
        /// <param name="instance">The instance.</param>
        partial void InsertKhSanPham(INVENTORY.Data.KhSanPham instance);

        /// <summary>Called before a <see cref="KhSanPham"/> is updated.</summary>
        /// <param name="instance">The instance.</param>
        partial void UpdateKhSanPham(INVENTORY.Data.KhSanPham instance);

        /// <summary>Called before a <see cref="KhSanPham"/> is deleted.</summary>
        /// <param name="instance">The instance.</param>
        partial void DeleteKhSanPham(INVENTORY.Data.KhSanPham instance);
        #endregion

        #region IUpdatable Members
        /// <summary>
        /// Adds the specified value to the collection.
        /// </summary>
        /// <param name="targetResource">Target object that defines the property.</param>
        /// <param name="propertyName">The name of the collection property to which the resource should be added..</param>
        /// <param name="resourceToBeAdded">The opaque object representing the resource to be added.</param>
        void System.Data.Services.IUpdatable.AddReferenceToCollection(object targetResource, string propertyName, object resourceToBeAdded)
        {
            var t = targetResource.GetType();

            var collectionProperty = GetPropertyInfoForType(t, propertyName, false);
            var collection = collectionProperty.GetValue(targetResource, null) as System.Collections.IList;
            if (collection == null)
                return; // throw error

            collection.Add(resourceToBeAdded);
        }

        /// <summary>
        /// Cancels a change to the data.
        /// </summary>
        void System.Data.Services.IUpdatable.ClearChanges()
        {
            var mi = GetType().GetMethod("ClearCache",
                System.Reflection.BindingFlags.Instance |
                System.Reflection.BindingFlags.NonPublic |
                System.Reflection.BindingFlags.InvokeMethod);

            if (mi != null)
                mi.Invoke(this, null);
        }

        /// <summary>
        /// Creates the resource of the specified type and that belongs to the specified container.
        /// </summary>
        /// <param name="containerName">The name of the entity set to which the resource belongs.</param>
        /// <param name="fullTypeName">The full namespace-qualified type name of the resource.</param>
        /// <returns>
        /// The object representing a resource of specified type and belonging to the specified container.
        /// </returns>
        object System.Data.Services.IUpdatable.CreateResource(string containerName, string fullTypeName)
        {
            var t = Type.GetType(fullTypeName);
            var table = GetTableForType(t);

            object value = Construct(t);
            table.InsertOnSubmit(value);

            return (value);
        }

        /// <summary>
        /// Deletes the specified resource.
        /// </summary>
        /// <param name="targetResource">The resource to be deleted.</param>
        void System.Data.Services.IUpdatable.DeleteResource(object targetResource)
        {
            var t = targetResource.GetType();
            var table = GetTableForType(t);
            table.DeleteOnSubmit(targetResource);
        }

        /// <summary>
        /// Gets the resource of the specified type identified by a query and type name.
        /// </summary>
        /// <param name="query">Language integratee query(LINQ) pointing to a particular resource.</param>
        /// <param name="fullTypeName">The fully qualified type name of resource.</param>
        /// <returns>
        /// An opaque object representing a resource of the specified type, referenced by the specified query.
        /// </returns>
        object System.Data.Services.IUpdatable.GetResource(System.Linq.IQueryable query, string fullTypeName)
        {
            object result = null;

            foreach (object item in query)
            {
                if (result != null)
                    throw new System.Data.Services.DataServiceException("A single resource is expected");
                result = item;
            }

            if (result == null)
                throw new System.Data.Services.DataServiceException(404, "Resource not found");

            if (fullTypeName != null && result.GetType().FullName != fullTypeName)
                throw new System.Data.Services.DataServiceException("Resource type mismatch");

            return result;
        }

        /// <summary>
        /// Gets the value of the specified property on the target object.
        /// </summary>
        /// <param name="targetResource">An opaque object that represents a resource.</param>
        /// <param name="propertyName">The name of the property whose value needs to be retrieved.</param>
        /// <returns></returns>
        object System.Data.Services.IUpdatable.GetValue(object targetResource, string propertyName)
        {
            var t = targetResource.GetType();
            var pi = GetPropertyInfoForType(t, propertyName, false);

            object value;

            try
            {
                value = pi.GetValue(targetResource, null);
            }
            catch (Exception ex)
            {
                throw new System.Data.Services.DataServiceException(
                    string.Format("Failed getting property {0} value", propertyName), ex);
            }
            return value;
        }

        /// <summary>
        /// Removes the specified value from the collection.
        /// </summary>
        /// <param name="targetResource">The target object that defines the property.</param>
        /// <param name="propertyName">The name of the property whose value needs to be updated.</param>
        /// <param name="resourceToBeRemoved">The property value that needs to be removed.</param>
        void System.Data.Services.IUpdatable.RemoveReferenceFromCollection(object targetResource, string propertyName, object resourceToBeRemoved)
        {
            var t = targetResource.GetType();

            var collectionProperty = GetPropertyInfoForType(t, propertyName, false);
            var collection = collectionProperty.GetValue(targetResource, null) as System.Collections.IList;
            if (collection == null)
                return; // throw error

            collection.Remove(resourceToBeRemoved);
        }

        /// <summary>
        /// Returns the instance of the resource represented by the specified resource object.
        /// </summary>
        /// <param name="resource">The object representing the resource whose instance needs to be retrieved.</param>
        /// <returns>
        /// Returns the instance of the resource represented by the specified resource object.
        /// </returns>
        object System.Data.Services.IUpdatable.ResolveResource(object resource)
        {
            return resource;
        }

        /// <summary>
        /// Saves all the changes that have been made by using the <see cref="T:System.Data.Services.IUpdatable"/> APIs.
        /// </summary>
        void System.Data.Services.IUpdatable.SaveChanges()
        {
            try
            {
                SubmitChanges();
            }
            catch (Exception ex)
            {
                throw new System.Data.Services.DataServiceException("Error Saving Context. " + ex.GetBaseException().Message, ex);
            }
        }

        /// <summary>
        /// Sets the value of the specified reference property on the target object.
        /// </summary>
        /// <param name="targetResource">The target object that defines the property.</param>
        /// <param name="propertyName">The name of the property whose value needs to be updated.</param>
        /// <param name="propertyValue">The property value to be updated.</param>
        void System.Data.Services.IUpdatable.SetReference(object targetResource, string propertyName, object propertyValue)
        {
            ((System.Data.Services.IUpdatable)this).SetValue(targetResource, propertyName, propertyValue);
        }

        /// <summary>
        /// Sets the value of the property with the specified name on the target resource to the specified property value.
        /// </summary>
        /// <param name="targetResource">The target object that defines the property.</param>
        /// <param name="propertyName">The name of the property whose value needs to be updated.</param>
        /// <param name="propertyValue">The property value for update.</param>
        void System.Data.Services.IUpdatable.SetValue(object targetResource, string propertyName, object propertyValue)
        {
            var t = targetResource.GetType();
            var pi = GetPropertyInfoForType(t, propertyName, true);

            try
            {
                pi.SetValue(targetResource, propertyValue, null);
            }
            catch (Exception ex)
            {
                throw new System.Data.Services.DataServiceException(
                  string.Format("Error setting property {0} to {1}", propertyName, propertyValue), ex);
            }
        }

        /// <summary>
        /// Updates the resource identified by the parameter <paramref name="resource"/>.
        /// </summary>
        /// <param name="resource">The resource to be updated.</param>
        /// <returns></returns>
        object System.Data.Services.IUpdatable.ResetResource(object resource)
        {
            var t = resource.GetType();
            var table = GetTableForType(t);
            return table.GetOriginalEntityState(resource);
        }

        private System.Reflection.PropertyInfo GetPropertyInfoForType(Type t, string propertyName, bool setter)
        {
            System.Reflection.PropertyInfo pi;

            try
            {
                System.Reflection.BindingFlags flags = System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance;
                flags |= setter ? System.Reflection.BindingFlags.SetProperty : System.Reflection.BindingFlags.GetProperty;

                pi = t.GetProperty(propertyName, flags);

                if (pi == null)
                    throw new System.Data.Services.DataServiceException(
                        string.Format("Failed to find property {0} on type {1}", propertyName, t.Name));
            }
            catch (Exception exception)
            {
                throw new System.Data.Services.DataServiceException(
                    string.Format("Error finding property {0}", propertyName), exception);
            }

            return (pi);
        }

        private System.Data.Linq.ITable GetTableForType(Type t)
        {
            var table = GetTable(t);
            if (table == null)
                throw new System.Data.Services.DataServiceException(string.Format("No table found for type {0}", t.Name));

            return (table);
        }

        private static object Construct(Type t)
        {
            var ci = t.GetConstructor(Type.EmptyTypes);

            if (ci == null)
                throw new System.Data.Services.DataServiceException(
                    string.Format("No default ctor found for type {0}", t.Name));

            return (ci.Invoke(null));
        }
        #endregion

        #region RuleManager
        private readonly CodeSmith.Data.Rules.RuleManager _ruleManager = new CodeSmith.Data.Rules.RuleManager();

        /// <summary>
        /// Gets the current <see cref="CodeSmith.Data.Rules.RuleManager"/> for the <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        public CodeSmith.Data.Rules.RuleManager RuleManager
        {
            get { return _ruleManager; }
        }

        /// <summary>
        /// Sends changes made to retrieved objects to the underlying database.
        /// </summary>
        /// <param name="failureMode">How concurrency conflicts should be reported.</param>
        public override void SubmitChanges(System.Data.Linq.ConflictMode failureMode)
        {
            bool isValid = RuleManager.Run(this);

            if (!isValid)
                throw new CodeSmith.Data.Rules.BrokenRuleException(RuleManager.BrokenRules);

            PopulateLastAudit();
            BeforeSubmitChanges();
            base.SubmitChanges(failureMode);
            RefreshLastAudit();
            AfterSubmitChanges();
        }
        #endregion

        #region Auditing
        /// <summary>Called before the underlying DataContext.SubmitChanges is called.</summary>
        partial void BeforeSubmitChanges();

        /// <summary>Called after the underlying DataContext.SubmitChanges is called.</summary>
        partial void AfterSubmitChanges();

        private bool _auditingEnabled = true;

        /// <summary>
        /// Gets or sets a value indicating whether auditing is enabled.
        /// </summary>
        /// <value><c>true</c> if auditing is enabled; otherwise, <c>false</c>.</value>
        public bool AuditingEnabled
        {
            get { return _auditingEnabled; }
            set { _auditingEnabled = value; }
        }

        private CodeSmith.Data.Audit.AuditLog _lastAudit;

        /// <summary>
        /// Gets the last <see cref="CodeSmith.Data.Audit.AuditLog"/>.
        /// </summary>
        /// <value>The last <see cref="CodeSmith.Data.Audit.AuditLog"/>.</value>
        /// <remarks>
        /// <see cref="AuditingEnabled"/> must be <c>true</c> for <see cref="LastAudit"/> to be populated.
        /// </remarks>
        public CodeSmith.Data.Audit.AuditLog LastAudit
        {
            get { return _lastAudit; }
        }

        /// <summary>
        /// Populates the <see cref="LastAudit"/> property with the <see cref="CodeSmith.Data.Audit.AuditLog"/>
        /// of changes in this <see cref="System.Data.Linq.DataContext"/>.
        /// </summary>
        /// <remarks>
        /// <see cref="AuditingEnabled"/> must be <c>true</c> for <see cref="LastAudit"/> to be populated.
        /// </remarks>
        protected virtual void PopulateLastAudit()
        {
            if (!AuditingEnabled)
                return;

            _lastAudit = CodeSmith.Data.Audit.AuditManager.CreateAuditLog(this);
        }

        /// <summary>
        /// Refresh the <see cref="AuditLog"/> values stored in the <see cref="LastAudit"/> after SubmitChanges call.
        /// </summary>
        protected virtual void RefreshLastAudit()
        {
            if (_lastAudit != null) 
                CodeSmith.Data.Audit.AuditManager.Refresh(_lastAudit);
        }
        #endregion

        /// <summary>
        /// Sends changes made to retrieved objects to the underlying database.
        /// </summary>
        /// <param name="refreshMode">Defines how to handle optimistic concurrency conflicts.</param>
        public void SubmitChanges(System.Data.Linq.RefreshMode refreshMode)
        {
            try
            {
                SubmitChanges(System.Data.Linq.ConflictMode.ContinueOnConflict);
            }
            catch (System.Data.Linq.ChangeConflictException)
            {
                foreach (var occ in ChangeConflicts)
                    occ.Resolve(refreshMode);

                SubmitChanges();
            }
        }
    }
}
#pragma warning restore 1591
