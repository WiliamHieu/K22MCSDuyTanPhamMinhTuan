#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace INVENTORY.Data
{
    /// <summary>
    /// The query extension class for KhPhieuNhap.
    /// </summary>
    public static partial class KhPhieuNhapExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static INVENTORY.Data.KhPhieuNhap GetByKey(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid id)
        {
            var entity = queryable as System.Data.Linq.Table<INVENTORY.Data.KhPhieuNhap>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((INVENTORY.Data.InventoryDbContext)entity.Context, id);

            return queryable.FirstOrDefault(k => k.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<INVENTORY.Data.KhPhieuNhap> table, System.Guid id)
        {
            return table.Delete(k => k.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ById(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid id)
        {
            return queryable.Where(k => k.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ById(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, System.Guid id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.Id != id);
                default:
                    return queryable.Where(k => k.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ById(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid id, params System.Guid[] additionalValues)
        {
            var idList = new List<System.Guid> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ById(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(k => values.Contains(k.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoHang">IdKhoHang to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int idKhoHang)
        {
            return queryable.Where(k => k.IdKhoHang == idKhoHang);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoHang">IdKhoHang to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, int idKhoHang)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdKhoHang > idKhoHang);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdKhoHang >= idKhoHang);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdKhoHang < idKhoHang);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdKhoHang <= idKhoHang);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdKhoHang != idKhoHang);
                default:
                    return queryable.Where(k => k.IdKhoHang == idKhoHang);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoHang">IdKhoHang to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int idKhoHang, params int[] additionalValues)
        {
            var idKhoHangList = new List<int> { idKhoHang };

            if (additionalValues != null)
                idKhoHangList.AddRange(additionalValues);

            if (idKhoHangList.Count == 1)
                return queryable.ByIdKhoHang(idKhoHangList[0]);

            return queryable.ByIdKhoHang(idKhoHangList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.IdKhoHang));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguonNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguonNhap">IdNguonNhap to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguonNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid idNguonNhap)
        {
            return queryable.Where(k => k.IdNguonNhap == idNguonNhap);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguonNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguonNhap">IdNguonNhap to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguonNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, System.Guid idNguonNhap)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdNguonNhap != idNguonNhap);
                default:
                    return queryable.Where(k => k.IdNguonNhap == idNguonNhap);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguonNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguonNhap">IdNguonNhap to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguonNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid idNguonNhap, params System.Guid[] additionalValues)
        {
            var idNguonNhapList = new List<System.Guid> { idNguonNhap };

            if (additionalValues != null)
                idNguonNhapList.AddRange(additionalValues);

            if (idNguonNhapList.Count == 1)
                return queryable.ByIdNguonNhap(idNguonNhapList[0]);

            return queryable.ByIdNguonNhap(idNguonNhapList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguonNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguonNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(k => values.Contains(k.IdNguonNhap));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdPhieuChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idPhieuChuyen">IdPhieuChuyen to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdPhieuChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid? idPhieuChuyen)
        {
            // support nulls
            return idPhieuChuyen == null 
                ? queryable.Where(k => k.IdPhieuChuyen == null) 
                : queryable.Where(k => k.IdPhieuChuyen == idPhieuChuyen);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdPhieuChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idPhieuChuyen">IdPhieuChuyen to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdPhieuChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, System.Guid? idPhieuChuyen)
        {
            if (idPhieuChuyen == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idPhieuChuyen", "Parameter 'idPhieuChuyen' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid? type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return idPhieuChuyen == null 
                        ? queryable.Where(k => k.IdPhieuChuyen != null) 
                        : queryable.Where(k => k.IdPhieuChuyen != idPhieuChuyen);
                default:
                    return idPhieuChuyen == null 
                        ? queryable.Where(k => k.IdPhieuChuyen == null) 
                        : queryable.Where(k => k.IdPhieuChuyen == idPhieuChuyen);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdPhieuChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idPhieuChuyen">IdPhieuChuyen to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdPhieuChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.Guid? idPhieuChuyen, params System.Guid?[] additionalValues)
        {
            var idPhieuChuyenList = new List<System.Guid?> { idPhieuChuyen };

            if (additionalValues != null)
                idPhieuChuyenList.AddRange(additionalValues);
            else
                idPhieuChuyenList.Add(null);

            if (idPhieuChuyenList.Count == 1)
                return queryable.ByIdPhieuChuyen(idPhieuChuyenList[0]);

            return queryable.ByIdPhieuChuyen(idPhieuChuyenList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdPhieuChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdPhieuChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<System.Guid?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<INVENTORY.Data.KhPhieuNhap, bool>("IdPhieuChuyen", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoChuyen">IdKhoChuyen to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int? idKhoChuyen)
        {
            // support nulls
            return idKhoChuyen == null 
                ? queryable.Where(k => k.IdKhoChuyen == null) 
                : queryable.Where(k => k.IdKhoChuyen == idKhoChuyen);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoChuyen">IdKhoChuyen to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, int? idKhoChuyen)
        {
            if (idKhoChuyen == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("idKhoChuyen", "Parameter 'idKhoChuyen' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdKhoChuyen > idKhoChuyen);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdKhoChuyen >= idKhoChuyen);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdKhoChuyen < idKhoChuyen);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdKhoChuyen <= idKhoChuyen);
                case ComparisonOperator.NotEquals:
                    return idKhoChuyen == null 
                        ? queryable.Where(k => k.IdKhoChuyen != null) 
                        : queryable.Where(k => k.IdKhoChuyen != idKhoChuyen);
                default:
                    return idKhoChuyen == null 
                        ? queryable.Where(k => k.IdKhoChuyen == null) 
                        : queryable.Where(k => k.IdKhoChuyen == idKhoChuyen);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoChuyen">IdKhoChuyen to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int? idKhoChuyen, params int?[] additionalValues)
        {
            var idKhoChuyenList = new List<int?> { idKhoChuyen };

            if (additionalValues != null)
                idKhoChuyenList.AddRange(additionalValues);
            else
                idKhoChuyenList.Add(null);

            if (idKhoChuyenList.Count == 1)
                return queryable.ByIdKhoChuyen(idKhoChuyenList[0]);

            return queryable.ByIdKhoChuyen(idKhoChuyenList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdKhoChuyen"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdKhoChuyen(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<int?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<INVENTORY.Data.KhPhieuNhap, bool>("IdKhoChuyen", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.LoaiNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loaiNhap">LoaiNhap to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByLoaiNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int loaiNhap)
        {
            return queryable.Where(k => k.LoaiNhap == loaiNhap);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.LoaiNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loaiNhap">LoaiNhap to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByLoaiNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, int loaiNhap)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.LoaiNhap > loaiNhap);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.LoaiNhap >= loaiNhap);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.LoaiNhap < loaiNhap);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.LoaiNhap <= loaiNhap);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.LoaiNhap != loaiNhap);
                default:
                    return queryable.Where(k => k.LoaiNhap == loaiNhap);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.LoaiNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="loaiNhap">LoaiNhap to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByLoaiNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int loaiNhap, params int[] additionalValues)
        {
            var loaiNhapList = new List<int> { loaiNhap };

            if (additionalValues != null)
                loaiNhapList.AddRange(additionalValues);

            if (loaiNhapList.Count == 1)
                return queryable.ByLoaiNhap(loaiNhapList[0]);

            return queryable.ByLoaiNhap(loaiNhapList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.LoaiNhap"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByLoaiNhap(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.LoaiNhap));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="soPhieu">SoPhieu to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, string soPhieu)
        {
            return queryable.Where(k => k.SoPhieu == soPhieu);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="soPhieu">SoPhieu to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ContainmentOperator containmentOperator, string soPhieu)
        {
            if (soPhieu == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("soPhieu", "Parameter 'soPhieu' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(k => k.SoPhieu.Contains(soPhieu));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(k => k.SoPhieu.StartsWith(soPhieu));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(k => k.SoPhieu.EndsWith(soPhieu));
                case ContainmentOperator.NotContains:
                    return queryable.Where(k => k.SoPhieu.Contains(soPhieu) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(k => k.SoPhieu != soPhieu);
                default:
                    return queryable.Where(k => k.SoPhieu == soPhieu);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="soPhieu">SoPhieu to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, string soPhieu, params string[] additionalValues)
        {
            var soPhieuList = new List<string> { soPhieu };

            if (additionalValues != null)
                soPhieuList.AddRange(additionalValues);

            if (soPhieuList.Count == 1)
                return queryable.BySoPhieu(soPhieuList[0]);

            return queryable.BySoPhieu(soPhieuList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<string> values)
        {
            return queryable.Where(k => values.Contains(k.SoPhieu));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiTao">IdNguoiTao to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int idNguoiTao)
        {
            return queryable.Where(k => k.IdNguoiTao == idNguoiTao);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiTao">IdNguoiTao to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, int idNguoiTao)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdNguoiTao > idNguoiTao);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdNguoiTao >= idNguoiTao);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdNguoiTao < idNguoiTao);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdNguoiTao <= idNguoiTao);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdNguoiTao != idNguoiTao);
                default:
                    return queryable.Where(k => k.IdNguoiTao == idNguoiTao);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiTao">IdNguoiTao to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, int idNguoiTao, params int[] additionalValues)
        {
            var idNguoiTaoList = new List<int> { idNguoiTao };

            if (additionalValues != null)
                idNguoiTaoList.AddRange(additionalValues);

            if (idNguoiTaoList.Count == 1)
                return queryable.ByIdNguoiTao(idNguoiTaoList[0]);

            return queryable.ByIdNguoiTao(idNguoiTaoList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.IdNguoiTao));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTao">NgayTao to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.DateTime ngayTao)
        {
            return queryable.Where(k => k.NgayTao == ngayTao);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTao">NgayTao to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, System.DateTime ngayTao)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.NgayTao > ngayTao);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.NgayTao >= ngayTao);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.NgayTao < ngayTao);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.NgayTao <= ngayTao);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.NgayTao != ngayTao);
                default:
                    return queryable.Where(k => k.NgayTao == ngayTao);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTao">NgayTao to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.DateTime ngayTao, params System.DateTime[] additionalValues)
        {
            var ngayTaoList = new List<System.DateTime> { ngayTao };

            if (additionalValues != null)
                ngayTaoList.AddRange(additionalValues);

            if (ngayTaoList.Count == 1)
                return queryable.ByNgayTao(ngayTaoList[0]);

            return queryable.ByNgayTao(ngayTaoList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(k => values.Contains(k.NgayTao));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTaoDate">NgayTaoDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.DateTime ngayTaoDate)
        {
            return queryable.Where(k => k.NgayTaoDate == ngayTaoDate);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTaoDate">NgayTaoDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, System.DateTime ngayTaoDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.NgayTaoDate > ngayTaoDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.NgayTaoDate >= ngayTaoDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.NgayTaoDate < ngayTaoDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.NgayTaoDate <= ngayTaoDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.NgayTaoDate != ngayTaoDate);
                default:
                    return queryable.Where(k => k.NgayTaoDate == ngayTaoDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTaoDate">NgayTaoDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, System.DateTime ngayTaoDate, params System.DateTime[] additionalValues)
        {
            var ngayTaoDateList = new List<System.DateTime> { ngayTaoDate };

            if (additionalValues != null)
                ngayTaoDateList.AddRange(additionalValues);

            if (ngayTaoDateList.Count == 1)
                return queryable.ByNgayTaoDate(ngayTaoDateList[0]);

            return queryable.ByNgayTaoDate(ngayTaoDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(k => values.Contains(k.NgayTaoDate));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.UpdateTon"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateTon">UpdateTon to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByUpdateTon(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, bool updateTon)
        {
            return queryable.Where(k => k.UpdateTon == updateTon);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.UpdateTon"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateTon">UpdateTon to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByUpdateTon(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ComparisonOperator comparisonOperator, bool updateTon)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.UpdateTon != updateTon);
                default:
                    return queryable.Where(k => k.UpdateTon == updateTon);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.UpdateTon"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateTon">UpdateTon to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByUpdateTon(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, bool updateTon, params bool[] additionalValues)
        {
            var updateTonList = new List<bool> { updateTon };

            if (additionalValues != null)
                updateTonList.AddRange(additionalValues);

            if (updateTonList.Count == 1)
                return queryable.ByUpdateTon(updateTonList[0]);

            return queryable.ByUpdateTon(updateTonList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.UpdateTon"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByUpdateTon(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(k => values.Contains(k.UpdateTon));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, string chuThich)
        {
            // support nulls
            return chuThich == null 
                ? queryable.Where(k => k.ChuThich == null) 
                : queryable.Where(k => k.ChuThich == chuThich);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, ContainmentOperator containmentOperator, string chuThich)
        {
            if (chuThich == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("chuThich", "Parameter 'chuThich' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(k => k.ChuThich.Contains(chuThich));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(k => k.ChuThich.StartsWith(chuThich));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(k => k.ChuThich.EndsWith(chuThich));
                case ContainmentOperator.NotContains:
                    return queryable.Where(k => k.ChuThich.Contains(chuThich) == false);
                case ContainmentOperator.NotEquals:
                    return chuThich == null 
                        ? queryable.Where(k => k.ChuThich != null) 
                        : queryable.Where(k => k.ChuThich != chuThich);
                default:
                    return chuThich == null 
                        ? queryable.Where(k => k.ChuThich == null) 
                        : queryable.Where(k => k.ChuThich == chuThich);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, string chuThich, params string[] additionalValues)
        {
            var chuThichList = new List<string> { chuThich };

            if (additionalValues != null)
                chuThichList.AddRange(additionalValues);
            else
                chuThichList.Add(null);

            if (chuThichList.Count == 1)
                return queryable.ByChuThich(chuThichList[0]);

            return queryable.ByChuThich(chuThichList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuNhap.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuNhap> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuNhap> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<INVENTORY.Data.KhPhieuNhap, bool>("ChuThich", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<INVENTORY.Data.InventoryDbContext, System.Guid, INVENTORY.Data.KhPhieuNhap> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (INVENTORY.Data.InventoryDbContext db, System.Guid id) =>
                        db.KhPhieuNhap.FirstOrDefault(k => k.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
