#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace INVENTORY.Data
{
    /// <summary>
    /// The query extension class for HtQuyenHan.
    /// </summary>
    public static partial class HtQuyenHanExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static INVENTORY.Data.HtQuyenHan GetByKey(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<INVENTORY.Data.HtQuyenHan>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((INVENTORY.Data.InventoryDbContext)entity.Context, id);

            return queryable.FirstOrDefault(h => h.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<INVENTORY.Data.HtQuyenHan> table, int id)
        {
            return table.Delete(h => h.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ById(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, int id)
        {
            return queryable.Where(h => h.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ById(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ComparisonOperator comparisonOperator, int id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.Id != id);
                default:
                    return queryable.Where(h => h.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ById(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ById(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.IdVaiTro"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idVaiTro">IdVaiTro to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByIdVaiTro(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, int idVaiTro)
        {
            return queryable.Where(h => h.IdVaiTro == idVaiTro);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.IdVaiTro"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idVaiTro">IdVaiTro to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByIdVaiTro(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ComparisonOperator comparisonOperator, int idVaiTro)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.IdVaiTro > idVaiTro);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.IdVaiTro >= idVaiTro);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.IdVaiTro < idVaiTro);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.IdVaiTro <= idVaiTro);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.IdVaiTro != idVaiTro);
                default:
                    return queryable.Where(h => h.IdVaiTro == idVaiTro);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.IdVaiTro"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idVaiTro">IdVaiTro to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByIdVaiTro(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, int idVaiTro, params int[] additionalValues)
        {
            var idVaiTroList = new List<int> { idVaiTro };

            if (additionalValues != null)
                idVaiTroList.AddRange(additionalValues);

            if (idVaiTroList.Count == 1)
                return queryable.ByIdVaiTro(idVaiTroList[0]);

            return queryable.ByIdVaiTro(idVaiTroList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.IdVaiTro"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByIdVaiTro(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.IdVaiTro));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenForm">TenForm to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByTenForm(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, string tenForm)
        {
            return queryable.Where(h => h.TenForm == tenForm);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenForm">TenForm to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByTenForm(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ContainmentOperator containmentOperator, string tenForm)
        {
            if (tenForm == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tenForm", "Parameter 'tenForm' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(h => h.TenForm.Contains(tenForm));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(h => h.TenForm.StartsWith(tenForm));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(h => h.TenForm.EndsWith(tenForm));
                case ContainmentOperator.NotContains:
                    return queryable.Where(h => h.TenForm.Contains(tenForm) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(h => h.TenForm != tenForm);
                default:
                    return queryable.Where(h => h.TenForm == tenForm);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenForm">TenForm to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByTenForm(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, string tenForm, params string[] additionalValues)
        {
            var tenFormList = new List<string> { tenForm };

            if (additionalValues != null)
                tenFormList.AddRange(additionalValues);

            if (tenFormList.Count == 1)
                return queryable.ByTenForm(tenFormList[0]);

            return queryable.ByTenForm(tenFormList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByTenForm(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<string> values)
        {
            return queryable.Where(h => values.Contains(h.TenForm));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xem">Xem to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool xem)
        {
            return queryable.Where(h => h.Xem == xem);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xem">Xem to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ComparisonOperator comparisonOperator, bool xem)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.Xem != xem);
                default:
                    return queryable.Where(h => h.Xem == xem);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xem">Xem to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool xem, params bool[] additionalValues)
        {
            var xemList = new List<bool> { xem };

            if (additionalValues != null)
                xemList.AddRange(additionalValues);

            if (xemList.Count == 1)
                return queryable.ByXem(xemList[0]);

            return queryable.ByXem(xemList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(h => values.Contains(h.Xem));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Them"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="them">Them to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByThem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool them)
        {
            return queryable.Where(h => h.Them == them);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Them"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="them">Them to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByThem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ComparisonOperator comparisonOperator, bool them)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.Them != them);
                default:
                    return queryable.Where(h => h.Them == them);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Them"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="them">Them to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByThem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool them, params bool[] additionalValues)
        {
            var themList = new List<bool> { them };

            if (additionalValues != null)
                themList.AddRange(additionalValues);

            if (themList.Count == 1)
                return queryable.ByThem(themList[0]);

            return queryable.ByThem(themList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Them"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByThem(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(h => values.Contains(h.Them));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Sua"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sua">Sua to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> BySua(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool sua)
        {
            return queryable.Where(h => h.Sua == sua);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Sua"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sua">Sua to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> BySua(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ComparisonOperator comparisonOperator, bool sua)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.Sua != sua);
                default:
                    return queryable.Where(h => h.Sua == sua);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Sua"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sua">Sua to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> BySua(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool sua, params bool[] additionalValues)
        {
            var suaList = new List<bool> { sua };

            if (additionalValues != null)
                suaList.AddRange(additionalValues);

            if (suaList.Count == 1)
                return queryable.BySua(suaList[0]);

            return queryable.BySua(suaList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Sua"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> BySua(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(h => values.Contains(h.Sua));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xoa">Xoa to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXoa(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool xoa)
        {
            return queryable.Where(h => h.Xoa == xoa);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xoa">Xoa to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXoa(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, ComparisonOperator comparisonOperator, bool xoa)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.Xoa != xoa);
                default:
                    return queryable.Where(h => h.Xoa == xoa);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xoa">Xoa to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXoa(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, bool xoa, params bool[] additionalValues)
        {
            var xoaList = new List<bool> { xoa };

            if (additionalValues != null)
                xoaList.AddRange(additionalValues);

            if (xoaList.Count == 1)
                return queryable.ByXoa(xoaList[0]);

            return queryable.ByXoa(xoaList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtQuyenHan.Xoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtQuyenHan> ByXoa(this IQueryable<INVENTORY.Data.HtQuyenHan> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(h => values.Contains(h.Xoa));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<INVENTORY.Data.InventoryDbContext, int, INVENTORY.Data.HtQuyenHan> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (INVENTORY.Data.InventoryDbContext db, int id) =>
                        db.HtQuyenHan.FirstOrDefault(h => h.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
