#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace INVENTORY.Data
{
    /// <summary>
    /// The query extension class for HtThietLap.
    /// </summary>
    public static partial class HtThietLapExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static INVENTORY.Data.HtThietLap GetByKey(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<INVENTORY.Data.HtThietLap>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((INVENTORY.Data.InventoryDbContext)entity.Context, id);

            return queryable.FirstOrDefault(h => h.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<INVENTORY.Data.HtThietLap> table, int id)
        {
            return table.Delete(h => h.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ById(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int id)
        {
            return queryable.Where(h => h.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ById(this IQueryable<INVENTORY.Data.HtThietLap> queryable, ComparisonOperator comparisonOperator, int id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.Id != id);
                default:
                    return queryable.Where(h => h.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ById(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ById(this IQueryable<INVENTORY.Data.HtThietLap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.TenPhanMem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenPhanMem">TenPhanMem to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByTenPhanMem(this IQueryable<INVENTORY.Data.HtThietLap> queryable, string tenPhanMem)
        {
            return queryable.Where(h => h.TenPhanMem == tenPhanMem);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.TenPhanMem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenPhanMem">TenPhanMem to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByTenPhanMem(this IQueryable<INVENTORY.Data.HtThietLap> queryable, ContainmentOperator containmentOperator, string tenPhanMem)
        {
            if (tenPhanMem == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tenPhanMem", "Parameter 'tenPhanMem' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(h => h.TenPhanMem.Contains(tenPhanMem));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(h => h.TenPhanMem.StartsWith(tenPhanMem));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(h => h.TenPhanMem.EndsWith(tenPhanMem));
                case ContainmentOperator.NotContains:
                    return queryable.Where(h => h.TenPhanMem.Contains(tenPhanMem) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(h => h.TenPhanMem != tenPhanMem);
                default:
                    return queryable.Where(h => h.TenPhanMem == tenPhanMem);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.TenPhanMem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenPhanMem">TenPhanMem to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByTenPhanMem(this IQueryable<INVENTORY.Data.HtThietLap> queryable, string tenPhanMem, params string[] additionalValues)
        {
            var tenPhanMemList = new List<string> { tenPhanMem };

            if (additionalValues != null)
                tenPhanMemList.AddRange(additionalValues);

            if (tenPhanMemList.Count == 1)
                return queryable.ByTenPhanMem(tenPhanMemList[0]);

            return queryable.ByTenPhanMem(tenPhanMemList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.TenPhanMem"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByTenPhanMem(this IQueryable<INVENTORY.Data.HtThietLap> queryable, IEnumerable<string> values)
        {
            return queryable.Where(h => values.Contains(h.TenPhanMem));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.NgayDuLieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayDuLieu">NgayDuLieu to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByNgayDuLieu(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int ngayDuLieu)
        {
            return queryable.Where(h => h.NgayDuLieu == ngayDuLieu);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.NgayDuLieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayDuLieu">NgayDuLieu to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByNgayDuLieu(this IQueryable<INVENTORY.Data.HtThietLap> queryable, ComparisonOperator comparisonOperator, int ngayDuLieu)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.NgayDuLieu > ngayDuLieu);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.NgayDuLieu >= ngayDuLieu);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.NgayDuLieu < ngayDuLieu);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.NgayDuLieu <= ngayDuLieu);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.NgayDuLieu != ngayDuLieu);
                default:
                    return queryable.Where(h => h.NgayDuLieu == ngayDuLieu);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.NgayDuLieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayDuLieu">NgayDuLieu to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByNgayDuLieu(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int ngayDuLieu, params int[] additionalValues)
        {
            var ngayDuLieuList = new List<int> { ngayDuLieu };

            if (additionalValues != null)
                ngayDuLieuList.AddRange(additionalValues);

            if (ngayDuLieuList.Count == 1)
                return queryable.ByNgayDuLieu(ngayDuLieuList[0]);

            return queryable.ByNgayDuLieu(ngayDuLieuList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.NgayDuLieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByNgayDuLieu(this IQueryable<INVENTORY.Data.HtThietLap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.NgayDuLieu));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.KieuKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="kieuKhoa">KieuKhoa to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByKieuKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int kieuKhoa)
        {
            return queryable.Where(h => h.KieuKhoa == kieuKhoa);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.KieuKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="kieuKhoa">KieuKhoa to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByKieuKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, ComparisonOperator comparisonOperator, int kieuKhoa)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.KieuKhoa > kieuKhoa);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.KieuKhoa >= kieuKhoa);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.KieuKhoa < kieuKhoa);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.KieuKhoa <= kieuKhoa);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.KieuKhoa != kieuKhoa);
                default:
                    return queryable.Where(h => h.KieuKhoa == kieuKhoa);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.KieuKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="kieuKhoa">KieuKhoa to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByKieuKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int kieuKhoa, params int[] additionalValues)
        {
            var kieuKhoaList = new List<int> { kieuKhoa };

            if (additionalValues != null)
                kieuKhoaList.AddRange(additionalValues);

            if (kieuKhoaList.Count == 1)
                return queryable.ByKieuKhoa(kieuKhoaList[0]);

            return queryable.ByKieuKhoa(kieuKhoaList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.KieuKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByKieuKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.KieuKhoa));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.ThoiGianKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thoiGianKhoa">ThoiGianKhoa to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByThoiGianKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int thoiGianKhoa)
        {
            return queryable.Where(h => h.ThoiGianKhoa == thoiGianKhoa);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.ThoiGianKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thoiGianKhoa">ThoiGianKhoa to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByThoiGianKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, ComparisonOperator comparisonOperator, int thoiGianKhoa)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.ThoiGianKhoa > thoiGianKhoa);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.ThoiGianKhoa >= thoiGianKhoa);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.ThoiGianKhoa < thoiGianKhoa);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.ThoiGianKhoa <= thoiGianKhoa);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.ThoiGianKhoa != thoiGianKhoa);
                default:
                    return queryable.Where(h => h.ThoiGianKhoa == thoiGianKhoa);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.ThoiGianKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thoiGianKhoa">ThoiGianKhoa to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByThoiGianKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, int thoiGianKhoa, params int[] additionalValues)
        {
            var thoiGianKhoaList = new List<int> { thoiGianKhoa };

            if (additionalValues != null)
                thoiGianKhoaList.AddRange(additionalValues);

            if (thoiGianKhoaList.Count == 1)
                return queryable.ByThoiGianKhoa(thoiGianKhoaList[0]);

            return queryable.ByThoiGianKhoa(thoiGianKhoaList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.ThoiGianKhoa"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByThoiGianKhoa(this IQueryable<INVENTORY.Data.HtThietLap> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.ThoiGianKhoa));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.XoaQuaNgay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xoaQuaNgay">XoaQuaNgay to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByXoaQuaNgay(this IQueryable<INVENTORY.Data.HtThietLap> queryable, bool xoaQuaNgay)
        {
            return queryable.Where(h => h.XoaQuaNgay == xoaQuaNgay);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.XoaQuaNgay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xoaQuaNgay">XoaQuaNgay to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByXoaQuaNgay(this IQueryable<INVENTORY.Data.HtThietLap> queryable, ComparisonOperator comparisonOperator, bool xoaQuaNgay)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support bool type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.XoaQuaNgay != xoaQuaNgay);
                default:
                    return queryable.Where(h => h.XoaQuaNgay == xoaQuaNgay);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.XoaQuaNgay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="xoaQuaNgay">XoaQuaNgay to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByXoaQuaNgay(this IQueryable<INVENTORY.Data.HtThietLap> queryable, bool xoaQuaNgay, params bool[] additionalValues)
        {
            var xoaQuaNgayList = new List<bool> { xoaQuaNgay };

            if (additionalValues != null)
                xoaQuaNgayList.AddRange(additionalValues);

            if (xoaQuaNgayList.Count == 1)
                return queryable.ByXoaQuaNgay(xoaQuaNgayList[0]);

            return queryable.ByXoaQuaNgay(xoaQuaNgayList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtThietLap.XoaQuaNgay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtThietLap> ByXoaQuaNgay(this IQueryable<INVENTORY.Data.HtThietLap> queryable, IEnumerable<bool> values)
        {
            return queryable.Where(h => values.Contains(h.XoaQuaNgay));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<INVENTORY.Data.InventoryDbContext, int, INVENTORY.Data.HtThietLap> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (INVENTORY.Data.InventoryDbContext db, int id) =>
                        db.HtThietLap.FirstOrDefault(h => h.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
