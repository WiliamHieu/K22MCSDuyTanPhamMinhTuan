#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace INVENTORY.Data
{
    /// <summary>
    /// The query extension class for KhPhieuChuyen.
    /// </summary>
    public static partial class KhPhieuChuyenExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static INVENTORY.Data.KhPhieuChuyen GetByKey(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.Guid id)
        {
            var entity = queryable as System.Data.Linq.Table<INVENTORY.Data.KhPhieuChuyen>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((INVENTORY.Data.InventoryDbContext)entity.Context, id);

            return queryable.FirstOrDefault(k => k.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<INVENTORY.Data.KhPhieuChuyen> table, System.Guid id)
        {
            return table.Delete(k => k.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ById(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.Guid id)
        {
            return queryable.Where(k => k.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ById(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, System.Guid id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.Id != id);
                default:
                    return queryable.Where(k => k.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ById(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.Guid id, params System.Guid[] additionalValues)
        {
            var idList = new List<System.Guid> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ById(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(k => values.Contains(k.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoHang">IdKhoHang to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idKhoHang)
        {
            return queryable.Where(k => k.IdKhoHang == idKhoHang);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoHang">IdKhoHang to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, int idKhoHang)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdKhoHang > idKhoHang);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdKhoHang >= idKhoHang);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdKhoHang < idKhoHang);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdKhoHang <= idKhoHang);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdKhoHang != idKhoHang);
                default:
                    return queryable.Where(k => k.IdKhoHang == idKhoHang);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoHang">IdKhoHang to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idKhoHang, params int[] additionalValues)
        {
            var idKhoHangList = new List<int> { idKhoHang };

            if (additionalValues != null)
                idKhoHangList.AddRange(additionalValues);

            if (idKhoHangList.Count == 1)
                return queryable.ByIdKhoHang(idKhoHangList[0]);

            return queryable.ByIdKhoHang(idKhoHangList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoHang"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoHang(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.IdKhoHang));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoNhan">IdKhoNhan to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idKhoNhan)
        {
            return queryable.Where(k => k.IdKhoNhan == idKhoNhan);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoNhan">IdKhoNhan to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, int idKhoNhan)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdKhoNhan > idKhoNhan);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdKhoNhan >= idKhoNhan);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdKhoNhan < idKhoNhan);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdKhoNhan <= idKhoNhan);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdKhoNhan != idKhoNhan);
                default:
                    return queryable.Where(k => k.IdKhoNhan == idKhoNhan);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idKhoNhan">IdKhoNhan to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idKhoNhan, params int[] additionalValues)
        {
            var idKhoNhanList = new List<int> { idKhoNhan };

            if (additionalValues != null)
                idKhoNhanList.AddRange(additionalValues);

            if (idKhoNhanList.Count == 1)
                return queryable.ByIdKhoNhan(idKhoNhanList[0]);

            return queryable.ByIdKhoNhan(idKhoNhanList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdKhoNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdKhoNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.IdKhoNhan));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="soPhieu">SoPhieu to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, string soPhieu)
        {
            return queryable.Where(k => k.SoPhieu == soPhieu);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="soPhieu">SoPhieu to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ContainmentOperator containmentOperator, string soPhieu)
        {
            if (soPhieu == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("soPhieu", "Parameter 'soPhieu' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(k => k.SoPhieu.Contains(soPhieu));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(k => k.SoPhieu.StartsWith(soPhieu));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(k => k.SoPhieu.EndsWith(soPhieu));
                case ContainmentOperator.NotContains:
                    return queryable.Where(k => k.SoPhieu.Contains(soPhieu) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(k => k.SoPhieu != soPhieu);
                default:
                    return queryable.Where(k => k.SoPhieu == soPhieu);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="soPhieu">SoPhieu to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, string soPhieu, params string[] additionalValues)
        {
            var soPhieuList = new List<string> { soPhieu };

            if (additionalValues != null)
                soPhieuList.AddRange(additionalValues);

            if (soPhieuList.Count == 1)
                return queryable.BySoPhieu(soPhieuList[0]);

            return queryable.BySoPhieu(soPhieuList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.SoPhieu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> BySoPhieu(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<string> values)
        {
            return queryable.Where(k => values.Contains(k.SoPhieu));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiGiao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiGiao">IdNguoiGiao to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiGiao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idNguoiGiao)
        {
            return queryable.Where(k => k.IdNguoiGiao == idNguoiGiao);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiGiao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiGiao">IdNguoiGiao to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiGiao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, int idNguoiGiao)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdNguoiGiao > idNguoiGiao);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdNguoiGiao >= idNguoiGiao);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdNguoiGiao < idNguoiGiao);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdNguoiGiao <= idNguoiGiao);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdNguoiGiao != idNguoiGiao);
                default:
                    return queryable.Where(k => k.IdNguoiGiao == idNguoiGiao);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiGiao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiGiao">IdNguoiGiao to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiGiao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idNguoiGiao, params int[] additionalValues)
        {
            var idNguoiGiaoList = new List<int> { idNguoiGiao };

            if (additionalValues != null)
                idNguoiGiaoList.AddRange(additionalValues);

            if (idNguoiGiaoList.Count == 1)
                return queryable.ByIdNguoiGiao(idNguoiGiaoList[0]);

            return queryable.ByIdNguoiGiao(idNguoiGiaoList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiGiao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiGiao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.IdNguoiGiao));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThai"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="trangThai">TrangThai to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThai(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int trangThai)
        {
            return queryable.Where(k => k.TrangThai == trangThai);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThai"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="trangThai">TrangThai to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThai(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, int trangThai)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.TrangThai > trangThai);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.TrangThai >= trangThai);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.TrangThai < trangThai);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.TrangThai <= trangThai);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.TrangThai != trangThai);
                default:
                    return queryable.Where(k => k.TrangThai == trangThai);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThai"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="trangThai">TrangThai to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThai(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int trangThai, params int[] additionalValues)
        {
            var trangThaiList = new List<int> { trangThai };

            if (additionalValues != null)
                trangThaiList.AddRange(additionalValues);

            if (trangThaiList.Count == 1)
                return queryable.ByTrangThai(trangThaiList[0]);

            return queryable.ByTrangThai(trangThaiList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThai"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThai(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.TrangThai));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThaiNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="trangThaiNhan">TrangThaiNhan to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThaiNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int trangThaiNhan)
        {
            return queryable.Where(k => k.TrangThaiNhan == trangThaiNhan);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThaiNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="trangThaiNhan">TrangThaiNhan to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThaiNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, int trangThaiNhan)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.TrangThaiNhan > trangThaiNhan);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.TrangThaiNhan >= trangThaiNhan);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.TrangThaiNhan < trangThaiNhan);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.TrangThaiNhan <= trangThaiNhan);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.TrangThaiNhan != trangThaiNhan);
                default:
                    return queryable.Where(k => k.TrangThaiNhan == trangThaiNhan);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThaiNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="trangThaiNhan">TrangThaiNhan to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThaiNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int trangThaiNhan, params int[] additionalValues)
        {
            var trangThaiNhanList = new List<int> { trangThaiNhan };

            if (additionalValues != null)
                trangThaiNhanList.AddRange(additionalValues);

            if (trangThaiNhanList.Count == 1)
                return queryable.ByTrangThaiNhan(trangThaiNhanList[0]);

            return queryable.ByTrangThaiNhan(trangThaiNhanList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.TrangThaiNhan"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByTrangThaiNhan(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.TrangThaiNhan));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiTao">IdNguoiTao to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idNguoiTao)
        {
            return queryable.Where(k => k.IdNguoiTao == idNguoiTao);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiTao">IdNguoiTao to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, int idNguoiTao)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.IdNguoiTao > idNguoiTao);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.IdNguoiTao >= idNguoiTao);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.IdNguoiTao < idNguoiTao);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.IdNguoiTao <= idNguoiTao);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.IdNguoiTao != idNguoiTao);
                default:
                    return queryable.Where(k => k.IdNguoiTao == idNguoiTao);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idNguoiTao">IdNguoiTao to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, int idNguoiTao, params int[] additionalValues)
        {
            var idNguoiTaoList = new List<int> { idNguoiTao };

            if (additionalValues != null)
                idNguoiTaoList.AddRange(additionalValues);

            if (idNguoiTaoList.Count == 1)
                return queryable.ByIdNguoiTao(idNguoiTaoList[0]);

            return queryable.ByIdNguoiTao(idNguoiTaoList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.IdNguoiTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByIdNguoiTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<int> values)
        {
            return queryable.Where(k => values.Contains(k.IdNguoiTao));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTao">NgayTao to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.DateTime ngayTao)
        {
            return queryable.Where(k => k.NgayTao == ngayTao);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTao">NgayTao to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, System.DateTime ngayTao)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.NgayTao > ngayTao);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.NgayTao >= ngayTao);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.NgayTao < ngayTao);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.NgayTao <= ngayTao);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.NgayTao != ngayTao);
                default:
                    return queryable.Where(k => k.NgayTao == ngayTao);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTao">NgayTao to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.DateTime ngayTao, params System.DateTime[] additionalValues)
        {
            var ngayTaoList = new List<System.DateTime> { ngayTao };

            if (additionalValues != null)
                ngayTaoList.AddRange(additionalValues);

            if (ngayTaoList.Count == 1)
                return queryable.ByNgayTao(ngayTaoList[0]);

            return queryable.ByNgayTao(ngayTaoList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTao"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTao(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(k => values.Contains(k.NgayTao));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTaoDate">NgayTaoDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.DateTime ngayTaoDate)
        {
            return queryable.Where(k => k.NgayTaoDate == ngayTaoDate);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTaoDate">NgayTaoDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ComparisonOperator comparisonOperator, System.DateTime ngayTaoDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(k => k.NgayTaoDate > ngayTaoDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(k => k.NgayTaoDate >= ngayTaoDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(k => k.NgayTaoDate < ngayTaoDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(k => k.NgayTaoDate <= ngayTaoDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(k => k.NgayTaoDate != ngayTaoDate);
                default:
                    return queryable.Where(k => k.NgayTaoDate == ngayTaoDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ngayTaoDate">NgayTaoDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, System.DateTime ngayTaoDate, params System.DateTime[] additionalValues)
        {
            var ngayTaoDateList = new List<System.DateTime> { ngayTaoDate };

            if (additionalValues != null)
                ngayTaoDateList.AddRange(additionalValues);

            if (ngayTaoDateList.Count == 1)
                return queryable.ByNgayTaoDate(ngayTaoDateList[0]);

            return queryable.ByNgayTaoDate(ngayTaoDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.NgayTaoDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByNgayTaoDate(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(k => values.Contains(k.NgayTaoDate));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, string chuThich)
        {
            // support nulls
            return chuThich == null 
                ? queryable.Where(k => k.ChuThich == null) 
                : queryable.Where(k => k.ChuThich == chuThich);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, ContainmentOperator containmentOperator, string chuThich)
        {
            if (chuThich == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("chuThich", "Parameter 'chuThich' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(k => k.ChuThich.Contains(chuThich));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(k => k.ChuThich.StartsWith(chuThich));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(k => k.ChuThich.EndsWith(chuThich));
                case ContainmentOperator.NotContains:
                    return queryable.Where(k => k.ChuThich.Contains(chuThich) == false);
                case ContainmentOperator.NotEquals:
                    return chuThich == null 
                        ? queryable.Where(k => k.ChuThich != null) 
                        : queryable.Where(k => k.ChuThich != chuThich);
                default:
                    return chuThich == null 
                        ? queryable.Where(k => k.ChuThich == null) 
                        : queryable.Where(k => k.ChuThich == chuThich);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, string chuThich, params string[] additionalValues)
        {
            var chuThichList = new List<string> { chuThich };

            if (additionalValues != null)
                chuThichList.AddRange(additionalValues);
            else
                chuThichList.Add(null);

            if (chuThichList.Count == 1)
                return queryable.ByChuThich(chuThichList[0]);

            return queryable.ByChuThich(chuThichList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.KhPhieuChuyen.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.KhPhieuChuyen> ByChuThich(this IQueryable<INVENTORY.Data.KhPhieuChuyen> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<INVENTORY.Data.KhPhieuChuyen, bool>("ChuThich", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<INVENTORY.Data.InventoryDbContext, System.Guid, INVENTORY.Data.KhPhieuChuyen> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (INVENTORY.Data.InventoryDbContext db, System.Guid id) =>
                        db.KhPhieuChuyen.FirstOrDefault(k => k.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
