#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace INVENTORY.Data
{
    /// <summary>
    /// The query extension class for HtChucNang.
    /// </summary>
    public static partial class HtChucNangExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static INVENTORY.Data.HtChucNang GetByKey(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string tenForm)
        {
            var entity = queryable as System.Data.Linq.Table<INVENTORY.Data.HtChucNang>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((INVENTORY.Data.InventoryDbContext)entity.Context, tenForm);

            return queryable.FirstOrDefault(h => h.TenForm == tenForm);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<INVENTORY.Data.HtChucNang> table, string tenForm)
        {
            return table.Delete(h => h.TenForm == tenForm);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenForm">TenForm to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTenForm(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string tenForm)
        {
            return queryable.Where(h => h.TenForm == tenForm);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenForm">TenForm to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTenForm(this IQueryable<INVENTORY.Data.HtChucNang> queryable, ContainmentOperator containmentOperator, string tenForm)
        {
            if (tenForm == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("tenForm", "Parameter 'tenForm' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(h => h.TenForm.Contains(tenForm));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(h => h.TenForm.StartsWith(tenForm));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(h => h.TenForm.EndsWith(tenForm));
                case ContainmentOperator.NotContains:
                    return queryable.Where(h => h.TenForm.Contains(tenForm) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(h => h.TenForm != tenForm);
                default:
                    return queryable.Where(h => h.TenForm == tenForm);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="tenForm">TenForm to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTenForm(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string tenForm, params string[] additionalValues)
        {
            var tenFormList = new List<string> { tenForm };

            if (additionalValues != null)
                tenFormList.AddRange(additionalValues);

            if (tenFormList.Count == 1)
                return queryable.ByTenForm(tenFormList[0]);

            return queryable.ByTenForm(tenFormList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.TenForm"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTenForm(this IQueryable<INVENTORY.Data.HtChucNang> queryable, IEnumerable<string> values)
        {
            return queryable.Where(h => values.Contains(h.TenForm));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.IdPhanHe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idPhanHe">IdPhanHe to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByIdPhanHe(this IQueryable<INVENTORY.Data.HtChucNang> queryable, int idPhanHe)
        {
            return queryable.Where(h => h.IdPhanHe == idPhanHe);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.IdPhanHe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idPhanHe">IdPhanHe to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByIdPhanHe(this IQueryable<INVENTORY.Data.HtChucNang> queryable, ComparisonOperator comparisonOperator, int idPhanHe)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.IdPhanHe > idPhanHe);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.IdPhanHe >= idPhanHe);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.IdPhanHe < idPhanHe);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.IdPhanHe <= idPhanHe);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.IdPhanHe != idPhanHe);
                default:
                    return queryable.Where(h => h.IdPhanHe == idPhanHe);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.IdPhanHe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="idPhanHe">IdPhanHe to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByIdPhanHe(this IQueryable<INVENTORY.Data.HtChucNang> queryable, int idPhanHe, params int[] additionalValues)
        {
            var idPhanHeList = new List<int> { idPhanHe };

            if (additionalValues != null)
                idPhanHeList.AddRange(additionalValues);

            if (idPhanHeList.Count == 1)
                return queryable.ByIdPhanHe(idPhanHeList[0]);

            return queryable.ByIdPhanHe(idPhanHeList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.IdPhanHe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByIdPhanHe(this IQueryable<INVENTORY.Data.HtChucNang> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.IdPhanHe));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.Ten"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ten">Ten to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTen(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string ten)
        {
            return queryable.Where(h => h.Ten == ten);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.Ten"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ten">Ten to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTen(this IQueryable<INVENTORY.Data.HtChucNang> queryable, ContainmentOperator containmentOperator, string ten)
        {
            if (ten == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("ten", "Parameter 'ten' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(h => h.Ten.Contains(ten));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(h => h.Ten.StartsWith(ten));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(h => h.Ten.EndsWith(ten));
                case ContainmentOperator.NotContains:
                    return queryable.Where(h => h.Ten.Contains(ten) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(h => h.Ten != ten);
                default:
                    return queryable.Where(h => h.Ten == ten);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.Ten"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ten">Ten to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTen(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string ten, params string[] additionalValues)
        {
            var tenList = new List<string> { ten };

            if (additionalValues != null)
                tenList.AddRange(additionalValues);

            if (tenList.Count == 1)
                return queryable.ByTen(tenList[0]);

            return queryable.ByTen(tenList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.Ten"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByTen(this IQueryable<INVENTORY.Data.HtChucNang> queryable, IEnumerable<string> values)
        {
            return queryable.Where(h => values.Contains(h.Ten));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ThuTu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thuTu">ThuTu to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByThuTu(this IQueryable<INVENTORY.Data.HtChucNang> queryable, int thuTu)
        {
            return queryable.Where(h => h.ThuTu == thuTu);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ThuTu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thuTu">ThuTu to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByThuTu(this IQueryable<INVENTORY.Data.HtChucNang> queryable, ComparisonOperator comparisonOperator, int thuTu)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(h => h.ThuTu > thuTu);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(h => h.ThuTu >= thuTu);
                case ComparisonOperator.LessThan:
                    return queryable.Where(h => h.ThuTu < thuTu);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(h => h.ThuTu <= thuTu);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(h => h.ThuTu != thuTu);
                default:
                    return queryable.Where(h => h.ThuTu == thuTu);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ThuTu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="thuTu">ThuTu to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByThuTu(this IQueryable<INVENTORY.Data.HtChucNang> queryable, int thuTu, params int[] additionalValues)
        {
            var thuTuList = new List<int> { thuTu };

            if (additionalValues != null)
                thuTuList.AddRange(additionalValues);

            if (thuTuList.Count == 1)
                return queryable.ByThuTu(thuTuList[0]);

            return queryable.ByThuTu(thuTuList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ThuTu"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByThuTu(this IQueryable<INVENTORY.Data.HtChucNang> queryable, IEnumerable<int> values)
        {
            return queryable.Where(h => values.Contains(h.ThuTu));
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByChuThich(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string chuThich)
        {
            // support nulls
            return chuThich == null 
                ? queryable.Where(h => h.ChuThich == null) 
                : queryable.Where(h => h.ChuThich == chuThich);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByChuThich(this IQueryable<INVENTORY.Data.HtChucNang> queryable, ContainmentOperator containmentOperator, string chuThich)
        {
            if (chuThich == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("chuThich", "Parameter 'chuThich' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(h => h.ChuThich.Contains(chuThich));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(h => h.ChuThich.StartsWith(chuThich));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(h => h.ChuThich.EndsWith(chuThich));
                case ContainmentOperator.NotContains:
                    return queryable.Where(h => h.ChuThich.Contains(chuThich) == false);
                case ContainmentOperator.NotEquals:
                    return chuThich == null 
                        ? queryable.Where(h => h.ChuThich != null) 
                        : queryable.Where(h => h.ChuThich != chuThich);
                default:
                    return chuThich == null 
                        ? queryable.Where(h => h.ChuThich == null) 
                        : queryable.Where(h => h.ChuThich == chuThich);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="chuThich">ChuThich to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByChuThich(this IQueryable<INVENTORY.Data.HtChucNang> queryable, string chuThich, params string[] additionalValues)
        {
            var chuThichList = new List<string> { chuThich };

            if (additionalValues != null)
                chuThichList.AddRange(additionalValues);
            else
                chuThichList.Add(null);

            if (chuThichList.Count == 1)
                return queryable.ByChuThich(chuThichList[0]);

            return queryable.ByChuThich(chuThichList);
        }

        /// <summary>
        /// Gets a query for <see cref="INVENTORY.Data.HtChucNang.ChuThich"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<INVENTORY.Data.HtChucNang> ByChuThich(this IQueryable<INVENTORY.Data.HtChucNang> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<INVENTORY.Data.HtChucNang, bool>("ChuThich", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<INVENTORY.Data.InventoryDbContext, string, INVENTORY.Data.HtChucNang> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (INVENTORY.Data.InventoryDbContext db, string tenForm) =>
                        db.HtChucNang.FirstOrDefault(h => h.TenForm == tenForm));

        }
        #endregion
    }
}
#pragma warning restore 1591
