<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MTIMS.Data</name>
    </assembly>
    <members>
        <member name="T:MTIMS.Data.Bases.DmBoPhanProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmBoPhanProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmBoPhanProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmBoPhanProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmBoPhanKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_BoPhan index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmBoPhan"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_BoPhan index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmBoPhan"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmBoPhanKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmBoPhan},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmBoPhan&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmBoPhan)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmBoPhan"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmBoPhan"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmBoPhan)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmBoPhan"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmBoPhan"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmBoPhanChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmBoPhan</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmBoPhanFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmBoPhan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmBoPhanFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmBoPhanParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmBoPhan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmBoPhanParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmBoPhanSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmBoPhan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmBoPhanSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmBoPhanSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdKhoChuyen(System.Nullable{System.Int32})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_DM_KhoHang_IdKhoChuyen key.fkKhPhieuNhapDmKhoHangIdKhoChuyen Description: </summary>
            <param name="_idKhoChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdKhoChuyen(MTIMS.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_DM_KhoHang_IdKhoChuyen key.FK_KH_PhieuNhap_DM_KhoHang_IdKhoChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoChuyen"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdNguonNhap(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_DM_NguonNhap key.fkKhPhieuNhapDmNguonNhap Description: </summary>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_DM_NguonNhap key.FK_KH_PhieuNhap_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdPhieuChuyen(System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_KH_PhieuChuyen key.fkKhPhieuNhapKhPhieuChuyen Description: </summary>
            <param name="_idPhieuChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdPhieuChuyen(MTIMS.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_KH_PhieuChuyen key.FK_KH_PhieuNhap_KH_PhieuChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdPhieuXuat(System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the IX_U_F_KH_PhieuNhap_IdPhieuXuat index.</summary>
            <param name="_idPhieuXuat"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetByIdPhieuXuat(MTIMS.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the IX_U_F_KH_PhieuNhap_IdPhieuXuat index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuat"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhap index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Update(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean},System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_Update' stored procedure.</summary>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idNguonNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="noHoaDon"> A <c>System.Boolean?</c> instance.</param>
            <param name="soHoaDon"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Update(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean},System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_Update' stored procedure.</summary>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idNguonNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="noHoaDon"> A <c>System.Boolean?</c> instance.</param>
            <param name="soHoaDon"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Delete(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.XoaYeuCau(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_XoaYeuCau' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.XoaYeuCau(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_XoaYeuCau' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.UpdateYeuCau(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_UpdateYeuCau' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="idLoaiVatTu"> A <c>System.Guid?</c> instance.</param>
            <param name="chenhLech"> A <c>System.Decimal?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.UpdateYeuCau(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_UpdateYeuCau' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="idLoaiVatTu"> A <c>System.Guid?</c> instance.</param>
            <param name="chenhLech"> A <c>System.Decimal?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.ThemYeuCau(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_ThemYeuCau' stored procedure.</summary>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.ThemYeuCau(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_ThemYeuCau' stored procedure.</summary>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhap_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhap},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuNhap&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuNhap)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuNhap)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuNhap</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuNhapSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapNbProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapNbProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_KhoHang key.fkKhPhieuNhapNbDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_KhoHang key.FK_KH_PhieuNhapNb_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdKhoChuyen(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_KhoHang_IdKhoChuyen key.fkKhPhieuNhapNbDmKhoHangIdKhoChuyen Description: </summary>
            <param name="_idKhoChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdKhoChuyen(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_KhoHang_IdKhoChuyen key.FK_KH_PhieuNhapNb_DM_KhoHang_IdKhoChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoChuyen"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdNguonNhap(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_NguonNhap key.fkKhPhieuNhapNbDmNguonNhap Description: </summary>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_NguonNhap key.FK_KH_PhieuNhapNb_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdPhieuChuyen(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_KH_PhieuChuyen key.fkKhPhieuNhapNbKhPhieuChuyen Description: </summary>
            <param name="_idPhieuChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdPhieuChuyen(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_KH_PhieuChuyen key.FK_KH_PhieuNhapNb_KH_PhieuChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdPhieuNhap(System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_KH_PhieuNhap key.fkKhPhieuNhapNbKhPhieuNhap Description: </summary>
            <param name="_idPhieuNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetByIdPhieuNhap(MTIMS.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_KH_PhieuNhap key.FK_KH_PhieuNhapNb_KH_PhieuNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNbKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhapNb index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhapNb index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNbKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Delete(System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhapNb_Delete' stored procedure.</summary>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhapNb_Delete' stored procedure.</summary>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhapNb_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuNhapNb_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhapNb},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuNhapNb&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuNhapNb)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuNhapNb)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuNhapNb</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuNhapNbSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapCtProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.GetByIdPhieuNhap(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_Ct_KH_PhieuNhap key.fkKhPhieuNhapCtKhPhieuNhap Description: </summary>
            <param name="_idPhieuNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.GetByIdPhieuNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_Ct_KH_PhieuNhap key.FK_KH_PhieuNhap_Ct_KH_PhieuNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapCtKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhap_Ct index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhap_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.GetByIdPhieuNhapIdLoaiVatTuIdSanPham(System.Guid,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuNhap_Ct_IdPhieuNhap_IdLoaiVatTu_IdSanPham index.</summary>
            <param name="_idPhieuNhap"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.GetByIdPhieuNhapIdLoaiVatTuIdSanPham(MTIMS.Data.TransactionManager,System.Guid,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuNhap_Ct_IdPhieuNhap_IdLoaiVatTu_IdSanPham index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhap"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idSanPham"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapCtKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhapCt},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuNhapCt&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuNhapCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuNhapCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapCtChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuNhapCt</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapCtFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapCtParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapCtSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapCtSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuNhapCtSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.GetByIdPhieuChuyen(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Ct_KH_PhieuChuyen key.fkKhPhieuChuyenCtKhPhieuChuyen Description: </summary>
            <param name="_idPhieuChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.GetByIdPhieuChuyen(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Ct_KH_PhieuChuyen key.FK_KH_PhieuChuyen_Ct_KH_PhieuChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenCtKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen_Ct index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.GetByIdPhieuChuyenIdLoaiVatTu(System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuChuyen_Ct_IdPhieuChuyen_IdLoaiVatTu index.</summary>
            <param name="_idPhieuChuyen"></param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.GetByIdPhieuChuyenIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuChuyen_Ct_IdPhieuChuyen_IdLoaiVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenCtKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Update(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Ct_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Update(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Ct_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuChuyenCt},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuChuyenCt&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuChuyenCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuChuyenCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenCtChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuChuyenCt</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenCtFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenCtParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenCtSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenCtSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuChuyenCtSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuMuonProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuMuonProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuMuonProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_DM_KhoHang key.fkKhPhieuMuonDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_DM_KhoHang key.FK_KH_PhieuMuon_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetByIdLoaiVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_DM_LoaiVatTu key.fkKhPhieuMuonDmLoaiVatTu Description: </summary>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_DM_LoaiVatTu key.FK_KH_PhieuMuon_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetByIdSanPham(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_KH_SanPham key.fkKhPhieuMuonKhSanPham Description: </summary>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_KH_SanPham key.FK_KH_PhieuMuon_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuMuonKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuMuon index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuMuon index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuMuonKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Delete(System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuMuon_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuMuon"> A <c>System.Guid?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuMuon_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuMuon"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuMuon_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuMuon_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuMuon},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuMuon&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuMuon)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuMuon)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuMuonChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuMuon</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuMuonFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuMuonFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuMuonParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuMuonParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuMuonSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuMuonSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuMuonSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdLoaiVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_DM_LoaiVatTu key.fkKhPhieuNhapNbCtDmLoaiVatTu Description: </summary>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_DM_LoaiVatTu key.FK_KH_PhieuNhapNb_Ct_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdPhieuNhapNb(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_KH_PhieuNhapNb key.fkKhPhieuNhapNbCtKhPhieuNhapNb Description: </summary>
            <param name="_idPhieuNhapNb"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdPhieuNhapNb(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_KH_PhieuNhapNb key.FK_KH_PhieuNhapNb_Ct_KH_PhieuNhapNb Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhapNb"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdSanPham(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_KH_SanPham key.fkKhPhieuNhapNbCtKhSanPham Description: </summary>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_KH_SanPham key.FK_KH_PhieuNhapNb_Ct_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNbCtKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhapNb_Ct index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhapNb_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdPhieuNhapNbIdLoaiVatTuIdSanPham(System.Guid,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuNhapNb_Ct_IdPhieuNhapNb_IdLoaiVatTu_IdSanPham index.</summary>
            <param name="_idPhieuNhapNb"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.GetByIdPhieuNhapNbIdLoaiVatTuIdSanPham(MTIMS.Data.TransactionManager,System.Guid,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuNhapNb_Ct_IdPhieuNhapNb_IdLoaiVatTu_IdSanPham index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhapNb"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idSanPham"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNbCtKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhapNbCt},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuNhapNbCt&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuNhapNbCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuNhapNbCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbCtChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuNhapNbCt</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbCtFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbCtParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuNhapNbCtSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuNhapNbCtSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuNhapNbCtSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.GetByIdPhieuChuyenCt(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Sp_KH_PhieuChuyen_Ct key.fkKhPhieuChuyenSpKhPhieuChuyenCt Description: </summary>
            <param name="_idPhieuChuyenCt"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.GetByIdPhieuChuyenCt(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Sp_KH_PhieuChuyen_Ct key.FK_KH_PhieuChuyen_Sp_KH_PhieuChuyen_Ct Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyenCt"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.GetByIdSanPham(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Sp_KH_SanPham key.fkKhPhieuChuyenSpKhSanPham Description: </summary>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Sp_KH_SanPham key.FK_KH_PhieuChuyen_Sp_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenSpKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen_Sp index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen_Sp index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenSpKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuChuyenSp},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuChuyenSp&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuChuyenSp)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuChuyenSp)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSpChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuChuyenSp</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSpFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSpParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSpSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSpSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuChuyenSpSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.GetByIdNguonNhap(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_DM_NguonNhap key.fkKhPhieuTraHangDmNguonNhap Description: </summary>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHang objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_DM_NguonNhap key.FK_KH_PhieuTraHang_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHang objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Delete(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuTraHang_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuTraHang"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuTraHang_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuTraHang"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuTraHang_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuTraHang_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuTraHang},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuTraHang&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuTraHang)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuTraHang)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuTraHang</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuTraHangSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.GetByIdLoaiVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Ct_DM_LoaiVatTu key.fkKhPhieuTraHangCtDmLoaiVatTu Description: </summary>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Ct_DM_LoaiVatTu key.FK_KH_PhieuTraHang_Ct_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.GetByIdPhieuTraHang(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Ct_KH_PhieuTraHang key.fkKhPhieuTraHangCtKhPhieuTraHang Description: </summary>
            <param name="_idPhieuTraHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.GetByIdPhieuTraHang(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Ct_KH_PhieuTraHang key.FK_KH_PhieuTraHang_Ct_KH_PhieuTraHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuTraHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangCtKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang_Ct index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangCtKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuTraHangCt},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuTraHangCt&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuTraHangCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuTraHangCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangCtChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuTraHangCt</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangCtFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangCtParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangCtSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangCtSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuTraHangCtSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuYeuCauProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuYeuCauProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.GetByIdBoPhan(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_DM_BoPhan key.fkKhPhieuDatHangDmBoPhan Description: </summary>
            <param name="_idBoPhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.GetByIdBoPhan(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_DM_BoPhan key.FK_KH_PhieuDatHang_DM_BoPhan Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idBoPhan"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_DM_KhoHang key.fkKhPhieuDatHangDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_DM_KhoHang key.FK_KH_PhieuDatHang_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCauKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuDatHang index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuDatHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCauKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Delete(System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuYeuCau_Delete' stored procedure.</summary>
            <param name="idPhieuYeuCau"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuYeuCau_Delete' stored procedure.</summary>
            <param name="idPhieuYeuCau"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuYeuCau_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuYeuCau_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuYeuCau},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuYeuCau&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuYeuCau)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuYeuCau)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuYeuCau</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuYeuCauSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuXuatProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuXuatProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.GetByIdBoPhan(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_DM_BoPhan key.fkKhPhieuXuatDmBoPhan Description: </summary>
            <param name="_idBoPhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuat objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.GetByIdBoPhan(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_DM_BoPhan key.FK_KH_PhieuXuat_DM_BoPhan Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idBoPhan"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuat objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Delete(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuXuat_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuXuat"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuXuat_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuXuat"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuXuat_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuXuat_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuXuat},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuXuat&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuXuat)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuXuat)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuXuat</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuXuatSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.GetByIdLoaiVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_Ct_DM_LoaiVatTu key.fkKhPhieuDatHangCtDmLoaiVatTu Description: </summary>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_Ct_DM_LoaiVatTu key.FK_KH_PhieuDatHang_Ct_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.GetByIdPhieuYeuCau(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_Ct_KH_PhieuDatHang key.fkKhPhieuDatHangCtKhPhieuDatHang Description: </summary>
            <param name="_idPhieuYeuCau"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.GetByIdPhieuYeuCau(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_Ct_KH_PhieuDatHang key.FK_KH_PhieuDatHang_Ct_KH_PhieuDatHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuYeuCau"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCauCtKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuDatHang_Ct index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuDatHang_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCauCtKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuYeuCauCt},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuYeuCauCt&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuYeuCauCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuYeuCauCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauCtChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuYeuCauCt</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauCtFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauCtParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuYeuCauCtSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuYeuCauCtSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuYeuCauCtSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.GetByIdPhieuTraHangCt(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Sp_KH_PhieuTraHang_Ct key.fkKhPhieuTraHangSpKhPhieuTraHangCt Description: </summary>
            <param name="_idPhieuTraHangCt"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.GetByIdPhieuTraHangCt(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Sp_KH_PhieuTraHang_Ct key.FK_KH_PhieuTraHang_Sp_KH_PhieuTraHang_Ct Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuTraHangCt"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.GetByIdSanPham(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Sp_KH_SanPham key.fkKhPhieuTraHangSpKhSanPham Description: </summary>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Sp_KH_SanPham key.FK_KH_PhieuTraHang_Sp_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangSpKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang_Sp index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang_Sp index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangSpKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuTraHangSp},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuTraHangSp&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuTraHangSp)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuTraHangSp)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSpChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuTraHangSp</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSpFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSpParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuTraHangSpSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuTraHangSpSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuTraHangSpSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatCtProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuXuatCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuXuatCtProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.GetByIdPhieuXuat(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Ct_KH_PhieuXuat key.fkKhPhieuXuatCtKhPhieuXuat Description: </summary>
            <param name="_idPhieuXuat"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.GetByIdPhieuXuat(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Ct_KH_PhieuXuat key.FK_KH_PhieuXuat_Ct_KH_PhieuXuat Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuat"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatCtKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat_Ct index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.GetByIdPhieuXuatIdLoaiVatTu(System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuXuat_Ct_IdPhieuXuat_IdLoaiVatTu index.</summary>
            <param name="_idPhieuXuat"></param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.GetByIdPhieuXuatIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuXuat_Ct_IdPhieuXuat_IdLoaiVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuat"></param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatCtKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuXuatCt},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuXuatCt&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuXuatCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuXuatCt)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatCtChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuXuatCt</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatCtFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatCtParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatCtSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatCtSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuXuatCtSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSpProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuXuatSpProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuXuatSpProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.GetByIdPhieuXuatCt(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Sp_KH_PhieuXuat_Ct key.fkKhPhieuXuatSpKhPhieuXuatCt Description: </summary>
            <param name="_idPhieuXuatCt"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.GetByIdPhieuXuatCt(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Sp_KH_PhieuXuat_Ct key.FK_KH_PhieuXuat_Sp_KH_PhieuXuat_Ct Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuatCt"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.GetByIdSanPham(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Sp_KH_SanPham key.fkKhPhieuXuatSpKhSanPham Description: </summary>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Sp_KH_SanPham key.FK_KH_PhieuXuat_Sp_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatSpKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat_Sp index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat_Sp index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatSpKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuXuatSp},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuXuatSp&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuXuatSp)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuXuatSp)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSpChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuXuatSp</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSpFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSpParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuXuatSpSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuXuatSpSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuXuatSpSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.GetByIdKhoNhan(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_DM_KhoHang_IdKhoNhan key.fkKhPhieuChuyenDmKhoHangIdKhoNhan Description: </summary>
            <param name="_idKhoNhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyen objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.GetByIdKhoNhan(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_DM_KhoHang_IdKhoNhan key.FK_KH_PhieuChuyen_DM_KhoHang_IdKhoNhan Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoNhan"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyen objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Delete(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Ct_Update(System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Ct_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Ct_Update(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Ct_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Get_SoPhieu(System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wrap the 'CustomGen_KH_PhieuChuyen_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuChuyen},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhPhieuChuyen&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhPhieuChuyen)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhPhieuChuyen)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhPhieuChuyen</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhPhieuChuyenSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhPhieuChuyenSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhPhieuChuyenSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmChiNhanhProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmChiNhanhProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmChiNhanhProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmChiNhanhKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_DM_ChiNhanh index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmChiNhanh"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_DM_ChiNhanh index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmChiNhanh"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmChiNhanhKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmChiNhanh},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmChiNhanh&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmChiNhanh)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmChiNhanh"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmChiNhanh"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmChiNhanh)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmChiNhanh"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmChiNhanh"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmChiNhanhChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmChiNhanh</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmChiNhanhFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmChiNhanh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmChiNhanhFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmChiNhanhParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmChiNhanh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmChiNhanhParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmChiNhanhSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmChiNhanh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmChiNhanhSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmChiNhanhSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNhomVatTuProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmNhomVatTuProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmNhomVatTuProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNhomVatTuKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NhomVatTu index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NhomVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNhomVatTuKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmNhomVatTu},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmNhomVatTu&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmNhomVatTu)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmNhomVatTu)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNhomVatTuChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmNhomVatTu</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNhomVatTuFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmNhomVatTuFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNhomVatTuParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmNhomVatTuParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNhomVatTuSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNhomVatTuSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmNhomVatTuSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmLoaiVatTuProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmLoaiVatTuProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.GetByIdDonViTinh(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTu_DM_DonViTinh key.fkDmLoaiVatTuDmDonViTinh Description: </summary>
            <param name="_idDonViTinh"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.GetByIdDonViTinh(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTu_DM_DonViTinh key.FK_DM_LoaiVatTu_DM_DonViTinh Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idDonViTinh"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.GetByIdNhomVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTu_DM_NhomVatTu key.fkDmLoaiVatTuDmNhomVatTu Description: </summary>
            <param name="_idNhomVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.GetByIdNhomVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTu_DM_NhomVatTu key.FK_DM_LoaiVatTu_DM_NhomVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNhomVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTuKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_LoaiVatTu index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_LoaiVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTuKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Delete(System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_DM_LoaiVatTu_Delete' stored procedure.</summary>
            <param name="idLoaiVatTu"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wrap the 'CustomGen_DM_LoaiVatTu_Delete' stored procedure.</summary>
            <param name="idLoaiVatTu"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmLoaiVatTu},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmLoaiVatTu&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmLoaiVatTu)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmLoaiVatTu)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmLoaiVatTu</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmLoaiVatTuSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmKhoHangProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmKhoHangProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmKhoHangProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmKhoHangProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.GetByIdChiNhanh(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_KhoHang_DM_ChiNhanh key.fkDmKhoHangDmChiNhanh Description: </summary>
            <param name="_idChiNhanh"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmKhoHang objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.GetByIdChiNhanh(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_KhoHang_DM_ChiNhanh key.FK_DM_KhoHang_DM_ChiNhanh Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idChiNhanh"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmKhoHang objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmKhoHangKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_DM_KhoHang index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmKhoHang"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_DM_KhoHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmKhoHang"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.GetByTenVietTat(System.String)">
            <summary>Gets rows from the datasource based on the UQ_DM_KhoHang_TenVietTat index.</summary>
            <param name="_tenVietTat"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmKhoHang"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.GetByTenVietTat(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets rows from the datasource based on the UQ_DM_KhoHang_TenVietTat index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_tenVietTat"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmKhoHang"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmKhoHangKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmKhoHang},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmKhoHang&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmKhoHang)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmKhoHang"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmKhoHang"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmKhoHang)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmKhoHang"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmKhoHang"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmKhoHangChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmKhoHang</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmKhoHangFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmKhoHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmKhoHangFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmKhoHangParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmKhoHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmKhoHangParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmKhoHangSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmKhoHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmKhoHangSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmKhoHangSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmDonViTinhProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmDonViTinhProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmDonViTinhProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmDonViTinhKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_DonViTinh index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmDonViTinh"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_DonViTinh index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmDonViTinh"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmDonViTinhKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmDonViTinh},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmDonViTinh&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmDonViTinh)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmDonViTinh"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmDonViTinh"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmDonViTinh)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmDonViTinh"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmDonViTinh"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmDonViTinhChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmDonViTinh</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmDonViTinhFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmDonViTinh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmDonViTinhFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmDonViTinhParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmDonViTinh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmDonViTinhParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmDonViTinhSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmDonViTinh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmDonViTinhSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmDonViTinhSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonKhoProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmNguonKhoProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmNguonKhoProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_NguonKho_DM_KhoHang key.fkDmNguonKhoDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_NguonKho_DM_KhoHang key.FK_DM_NguonKho_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.GetByIdNguonNhap(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_NguonKho_DM_NguonNhap key.fkDmNguonKhoDmNguonNhap Description: </summary>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_NguonKho_DM_NguonNhap key.FK_DM_NguonKho_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonKhoKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NguonKho index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNguonKho"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NguonKho index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNguonKho"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonKhoKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmNguonKho},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmNguonKho&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmNguonKho)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmNguonKho"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmNguonKho"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmNguonKho)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmNguonKho"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmNguonKho"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonKhoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmNguonKho</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonKhoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonKho"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmNguonKhoFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonKhoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonKho"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmNguonKhoParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonKhoSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonKho"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonKhoSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmNguonKhoSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtVaiTroProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtVaiTroProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtVaiTroProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtVaiTroProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtVaiTroKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_VaiTro index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtVaiTro"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_VaiTro index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtVaiTro"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtVaiTroKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtVaiTro},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtVaiTro&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtVaiTro)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtVaiTro"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtVaiTro"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtVaiTro)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtVaiTro"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtVaiTro"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtVaiTroChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtVaiTro</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtVaiTroFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtVaiTroFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtVaiTroParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtVaiTroParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtVaiTroSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtVaiTroSortBuilder.#ctor">
            <summary>Initializes a new instance of the HtVaiTroSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonNhapProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmNguonNhapProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmNguonNhapProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonNhapKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NguonNhap index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNguonNhap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NguonNhap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNguonNhap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonNhapKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmNguonNhap},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmNguonNhap&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmNguonNhap)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmNguonNhap"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmNguonNhap"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmNguonNhap)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmNguonNhap"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmNguonNhap"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonNhapChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmNguonNhap</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonNhapFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmNguonNhapFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonNhapParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmNguonNhapParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmNguonNhapSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmNguonNhapSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmNguonNhapSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_KhoHang key.fkDmLoaiVatTuViTriDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_KhoHang key.FK_DM_LoaiVatTuViTri_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdLoaiVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_LoaiVatTu key.fkDmLoaiVatTuViTriDmLoaiVatTu Description: </summary>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_LoaiVatTu key.FK_DM_LoaiVatTuViTri_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdViTri(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_ViTri key.fkDmLoaiVatTuViTriDmViTri Description: </summary>
            <param name="_idViTri"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdViTri(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_ViTri key.FK_DM_LoaiVatTuViTri_DM_ViTri Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idViTri"></param>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTuViTriKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdKhoHangIdLoaiVatTuIdViTri(System.Int32,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the IX_DM_LoaiVatTuViTri index.</summary>
            <param name="_idKhoHang"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idViTri"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetByIdKhoHangIdLoaiVatTuIdViTri(MTIMS.Data.TransactionManager,System.Int32,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the IX_DM_LoaiVatTuViTri index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idViTri"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_LoaiVatTuViTri index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_LoaiVatTuViTri index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTuViTriKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmLoaiVatTuViTri},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmLoaiVatTuViTri&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmLoaiVatTuViTri)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmLoaiVatTuViTri)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuViTriChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmLoaiVatTuViTri</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuViTriFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuViTriParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmLoaiVatTuViTriSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmLoaiVatTuViTriSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmLoaiVatTuViTriSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhSanPhamProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhSanPhamProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhSanPhamProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.KhSanPhamProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_KhoHang key.fkKhSanPhamDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_KhoHang key.FK_KH_SanPham_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdLoaiVatTu(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_LoaiVatTu key.fkKhSanPhamDmLoaiVatTu Description: </summary>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_LoaiVatTu key.FK_KH_SanPham_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdNguonNhap(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_NguonNhap key.fkKhSanPhamDmNguonNhap Description: </summary>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_NguonNhap key.FK_KH_SanPham_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdSanPham(System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_KH_SanPham key.fkKhSanPhamKhSanPham Description: </summary>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_KH_SanPham key.FK_KH_SanPham_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.KhSanPhamKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_SanPham index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhSanPham"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_SanPham index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhSanPham"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.KhSanPhamKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Update(System.Nullable{System.Int32},System.Nullable{System.Guid},System.String)">
            <summary>This method wrap the 'CustomGen_KH_SanPham_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieu"> A <c>System.Guid?</c> instance.</param>
            <param name="loaiPhieu"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Update(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.String)">
            <summary>This method wrap the 'CustomGen_KH_SanPham_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieu"> A <c>System.Guid?</c> instance.</param>
            <param name="loaiPhieu"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.KhSanPham},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;KhSanPham&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.KhSanPham)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhSanPham"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhSanPham"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.KhSanPham)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.KhSanPham"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.KhSanPham"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhSanPhamChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.KhSanPham</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.KhSanPhamFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhSanPham"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhSanPhamFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhSanPhamParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhSanPham"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KhSanPhamParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.KhSanPhamSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhSanPham"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.KhSanPhamSortBuilder.#ctor">
            <summary>Initializes a new instance of the KhSanPhamSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtQuyenHanProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtQuyenHanProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtQuyenHanProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.GetByIdVaiTro(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_QuyenHan_HT_VaiTro key.fkHtQuyenHanHtVaiTro Description: </summary>
            <param name="_idVaiTro"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtQuyenHan objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.GetByIdVaiTro(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_QuyenHan_HT_VaiTro key.FK_HT_QuyenHan_HT_VaiTro Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idVaiTro"></param>
            <returns>Returns a typed collection of MTIMS.Entities.HtQuyenHan objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtQuyenHanKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_QuyenHan index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtQuyenHan"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_QuyenHan index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtQuyenHan"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtQuyenHanKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtQuyenHan},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtQuyenHan&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtQuyenHan)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtQuyenHan"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtQuyenHan"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtQuyenHan)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtQuyenHan"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtQuyenHan"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtQuyenHanChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtQuyenHan</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtQuyenHanFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtQuyenHan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtQuyenHanFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtQuyenHanParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtQuyenHan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtQuyenHanParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtQuyenHanSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtQuyenHan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtQuyenHanSortBuilder.#ctor">
            <summary>Initializes a new instance of the HtQuyenHanSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNhatKyProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtNhatKyProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNhatKyProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtNhatKyProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNhatKyKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_HT_NhatKy index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNhatKy"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_HT_NhatKy index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNhatKy"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNhatKyKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtNhatKy},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtNhatKy&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtNhatKy)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtNhatKy"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtNhatKy"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtNhatKy)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtNhatKy"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtNhatKy"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNhatKyChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtNhatKy</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNhatKyFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNhatKy"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtNhatKyFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNhatKyParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNhatKy"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtNhatKyParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKyParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNhatKySortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNhatKy"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNhatKySortBuilder.#ctor">
            <summary>Initializes a new instance of the HtNhatKySqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtNguoiDungProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtNguoiDungProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDungKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_NguoiDung index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDung"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_NguoiDung index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDung"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.GetByTenTruyCap(System.String)">
            <summary>Gets rows from the datasource based on the UQ_HT_NguoiDung_TenTruyCap index.</summary>
            <param name="_tenTruyCap"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDung"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.GetByTenTruyCap(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets rows from the datasource based on the UQ_HT_NguoiDung_TenTruyCap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_tenTruyCap"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDung"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDungKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtNguoiDung},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtNguoiDung&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtNguoiDung)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtNguoiDung"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtNguoiDung"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtNguoiDung)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtNguoiDung"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtNguoiDung"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtNguoiDung</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDung"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDung"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDung"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungSortBuilder.#ctor">
            <summary>Initializes a new instance of the HtNguoiDungSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmViTriProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmViTriProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmViTriProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.DmViTriProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.DmViTriKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.GetById(System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_ViTri index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmViTri"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_ViTri index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmViTri"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.DmViTriKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.Delete(System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.DmViTri},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;DmViTri&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.DmViTri)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmViTri"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmViTri"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.DmViTri)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.DmViTri"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.DmViTri"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmViTriChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.DmViTri</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DmViTriFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmViTriFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmViTriParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmViTriParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.DmViTriSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DmViTriSortBuilder.#ctor">
            <summary>Initializes a new instance of the DmViTriSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdKhoHang(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_DM_KhoHang key.fkHtNguoiDungVaiTroDmKhoHang Description: </summary>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_DM_KhoHang key.FK_HT_NguoiDungVaiTro_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdNguoiDung(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_HT_NguoiDung key.fkHtNguoiDungVaiTroHtNguoiDung Description: </summary>
            <param name="_idNguoiDung"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdNguoiDung(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_HT_NguoiDung key.FK_HT_NguoiDungVaiTro_HT_NguoiDung Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguoiDung"></param>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdVaiTro(System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_HT_VaiTro key.fkHtNguoiDungVaiTroHtVaiTro Description: </summary>
            <param name="_idVaiTro"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdVaiTro(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_HT_VaiTro key.FK_HT_NguoiDungVaiTro_HT_VaiTro Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idVaiTro"></param>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDungVaiTroKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_NguoiDungVaiTro index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_NguoiDungVaiTro index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdVaiTroIdNguoiDungIdKhoHang(System.Int32,System.Int32,System.Int32)">
            <summary>Gets rows from the datasource based on the UQ_HT_NguoiDungVaiTro_IdVaiTro_IdNguoiDung_IdKhoHang index.</summary>
            <param name="_idVaiTro"></param>
            <param name="_idNguoiDung"></param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.GetByIdVaiTroIdNguoiDungIdKhoHang(MTIMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>Gets rows from the datasource based on the UQ_HT_NguoiDungVaiTro_IdVaiTro_IdNguoiDung_IdKhoHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idVaiTro"></param>
            <param name="_idNguoiDung"></param>
            <param name="_idKhoHang"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDungVaiTroKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtNguoiDungVaiTro},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtNguoiDungVaiTro&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtNguoiDungVaiTro)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtNguoiDungVaiTro)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungVaiTroChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtNguoiDungVaiTro</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungVaiTroFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungVaiTroParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtNguoiDungVaiTroSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtNguoiDungVaiTroSortBuilder.#ctor">
            <summary>Initializes a new instance of the HtNguoiDungVaiTroSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtThietLapProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtThietLapProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtThietLapProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtThietLapProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtThietLapKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.GetById(System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_ThietLap index.</summary>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtThietLap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_ThietLap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtThietLap"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtThietLapKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.Delete(System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtThietLap},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtThietLap&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtThietLap)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtThietLap"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtThietLap"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtThietLap)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtThietLap"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtThietLap"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtThietLapChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtThietLap</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtThietLapFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtThietLap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtThietLapFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtThietLapParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtThietLap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtThietLapParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtThietLapSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtThietLap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtThietLapSortBuilder.#ctor">
            <summary>Initializes a new instance of the HtThietLapSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtBanQuyenProviderBase">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtBanQuyenProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore">
            <summary>This class is the base class for any <see cref="T:MTIMS.Data.Bases.HtBanQuyenProviderBase"/> implementation. It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.</summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.Get(MTIMS.Data.TransactionManager,MTIMS.Entities.HtBanQuyenKey)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.GetByMaKichHoat(System.String)">
            <summary>Gets rows from the datasource based on the PK_HT_BanQuyen index.</summary>
            <param name="_maKichHoat"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtBanQuyen"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.GetByMaKichHoat(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets rows from the datasource based on the PK_HT_BanQuyen index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_maKichHoat"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtBanQuyen"/> class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.HtBanQuyenKey)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.Delete(System.String)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_maKichHoat">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.Delete(MTIMS.Data.TransactionManager,System.String)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_maKichHoat">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.Fill(System.Data.IDataReader,MTIMS.Entities.TList{MTIMS.Entities.HtBanQuyen},System.Int32,System.Int32)">
            <summary>Fill a TList&lt;HtBanQuyen&gt; From a DataReader.</summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:MTIMS.Entities.TList`1"/></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.RefreshEntity(System.Data.IDataReader,MTIMS.Entities.HtBanQuyen)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtBanQuyen"/> object from the <see cref="T:System.Data.IDataReader"/>.</summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtBanQuyen"/> object to refresh.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenProviderBaseCore.RefreshEntity(System.Data.DataSet,MTIMS.Entities.HtBanQuyen)">
            <summary>Refreshes the <see cref="T:MTIMS.Entities.HtBanQuyen"/> object from the <see cref="T:System.Data.DataSet"/>.</summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:MTIMS.Entities.HtBanQuyen"/> object.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtBanQuyenChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>MTIMS.Entities.HtBanQuyen</c>
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.HtBanQuyenFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtBanQuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtBanQuyenFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtBanQuyenParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtBanQuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the HtBanQuyenParameterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.HtBanQuyenSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtBanQuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.HtBanQuyenSortBuilder.#ctor">
            <summary>Initializes a new instance of the HtBanQuyenSqlSortBuilder class.</summary>
        </member>
        <member name="T:MTIMS.Data.Bases.INetTiersProvider">
            <summary>
            Interface for NetTiersProvider
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.CreateTransaction">
            <summary>
            Creates the transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.CurrentLoadPolicy">
            <summary>
            Gets or sets the current load policy.
            </summary>
            <value>The current load policy.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
            <value>The default command timeout.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets a value indicating whether [enable entity tracking].
            </summary>
            <value>
            	<c>true</c> if [enable entity tracking]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets a value indicating whether [enable list tracking].
            </summary>
            <value><c>true</c> if [enable list tracking]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets a value indicating whether [enable method authorization].
            </summary>
            <value>
            	<c>true</c> if [enable method authorization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the type of the entity creational factory.
            </summary>
            <value>The type of the entity creational factory.</value>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteDataSet(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteReader(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteScalar(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.INetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The config.</param>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.IsTransactionSupported">
            <summary>
            Gets a value indicating whether this instance is transaction supported.
            </summary>
            <value>
            	<c>true</c> if this instance is transaction supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MTIMS.Data.Bases.INetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets a value indicating whether [use entity factory].
            </summary>
            <value><c>true</c> if [use entity factory]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MTIMS.Data.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmBoPhanProvider">
            <summary>
             Current DmBoPhanProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuNhapProvider">
            <summary>
             Current KhPhieuNhapProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuNhapNbProvider">
            <summary>
             Current KhPhieuNhapNbProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuNhapCtProvider">
            <summary>
             Current KhPhieuNhapCtProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuChuyenCtProvider">
            <summary>
             Current KhPhieuChuyenCtProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuMuonProvider">
            <summary>
             Current KhPhieuMuonProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuNhapNbCtProvider">
            <summary>
             Current KhPhieuNhapNbCtProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuChuyenSpProvider">
            <summary>
             Current KhPhieuChuyenSpProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuTraHangProvider">
            <summary>
             Current KhPhieuTraHangProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuTraHangCtProvider">
            <summary>
             Current KhPhieuTraHangCtProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuYeuCauProvider">
            <summary>
             Current KhPhieuYeuCauProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuXuatProvider">
            <summary>
             Current KhPhieuXuatProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuYeuCauCtProvider">
            <summary>
             Current KhPhieuYeuCauCtProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuTraHangSpProvider">
            <summary>
             Current KhPhieuTraHangSpProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuXuatCtProvider">
            <summary>
             Current KhPhieuXuatCtProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuXuatSpProvider">
            <summary>
             Current KhPhieuXuatSpProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhPhieuChuyenProvider">
            <summary>
             Current KhPhieuChuyenProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmChiNhanhProvider">
            <summary>
             Current DmChiNhanhProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmNhomVatTuProvider">
            <summary>
             Current DmNhomVatTuProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmLoaiVatTuProvider">
            <summary>
             Current DmLoaiVatTuProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmKhoHangProvider">
            <summary>
             Current DmKhoHangProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmDonViTinhProvider">
            <summary>
             Current DmDonViTinhProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmNguonKhoProvider">
            <summary>
             Current DmNguonKhoProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtVaiTroProvider">
            <summary>
             Current HtVaiTroProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmNguonNhapProvider">
            <summary>
             Current DmNguonNhapProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmLoaiVatTuViTriProvider">
            <summary>
             Current DmLoaiVatTuViTriProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.KhSanPhamProvider">
            <summary>
             Current KhSanPhamProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtQuyenHanProvider">
            <summary>
             Current HtQuyenHanProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtNhatKyProvider">
            <summary>
             Current HtNhatKyProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtNguoiDungProvider">
            <summary>
             Current HtNguoiDungProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.DmViTriProvider">
            <summary>
             Current DmViTriProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtNguoiDungVaiTroProvider">
            <summary>
             Current HtNguoiDungVaiTroProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtThietLapProvider">
            <summary>
             Current HtThietLapProviderBase instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProvider.HtBanQuyenProvider">
            <summary>
             Current HtBanQuyenProviderBase instance.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.NetTiersProviderBase">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.CurrentLoadPolicy">
            <summary>
            Get or set the current LoadPolicy in effect
            </summary>
            <value>A <see cref="T:MTIMS.Data.Bases.LoadPolicy"/> enumeration member.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderBase.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:MTIMS.Data.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.CreateTransaction">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteReader(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteDataSet(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteScalar(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderBase.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.Bases.LoadPolicy">
            <summary>
            Possibel load policies that can be applied when a provider Load method is called. Determines 
            how entities with EntityState.Unchanged and EntityState.Changed are treated during a Load
            when entity tracking is enabled.
            </summary>
        </member>
        <member name="F:MTIMS.Data.Bases.LoadPolicy.PreserveChanges">
            <summary>
            Refresh entities with EntityState.Unchanged if entity tracking is enabled. Entities with 
            EntityState.Changed will not be refreshed with information from the database.
            </summary>
        </member>
        <member name="F:MTIMS.Data.Bases.LoadPolicy.DiscardChanges">
            <summary>
            Refresh entities with EntityState.Changed as well as EntityState.Unchanged i.e. discard any
            unsaved changes.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:MTIMS.Data.Bases.NetTiersProviderCollection.Add(MTIMS.Data.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:MTIMS.Data.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityProviderBase`2">
            <summary>Serves as the base class for objects that provide data access functionality. Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.</summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId property of the specified business object class.</typeparam>
            <remarks>This file is generated once and will never be overwritten.</remarks>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Get(MTIMS.Data.TransactionManager,`1)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Insert(MTIMS.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Insert(MTIMS.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.BulkInsert(MTIMS.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Update(MTIMS.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Update(MTIMS.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Delete(MTIMS.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Delete(MTIMS.Data.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Delete(MTIMS.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.Delete(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.CanDeepLoad(MTIMS.Entities.IEntity,System.String,MTIMS.Data.DeepLoadType,MTIMS.Data.Bases.DeepSession)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
             <param name="entity">The entity.</param>
             <param name="key">The key.</param>
             <param name="deepLoadType">Type of the deep load.</param>
             <param name="innerList">The inner list.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.CanDeepSave(System.Object,System.String,MTIMS.Data.DeepSaveType,MTIMS.Data.Bases.DeepSession)">
            <summary>
            Enforces the rules set in order to save this property for a given type.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="deepSaveType">Type of the deep save.</param>
            <param name="innerList">The inner list.</param>
            <returns>
            <c>true</c> if this instance [can deep save] the specified entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.GetDeepSessionArgs(MTIMS.Data.Bases.DeepSession,System.Enum,System.Object,System.String)">
            <summary>
            Gets the DeepSession Arguments for an event.
            </summary>
            <param name="deepSession">the current DeepSession.</param>
            <param name="deepTypeValue"> The Deep Type Value</param>
            <param name="obj">The current entity or list.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>DeepSessionEventArgs</c> if the item being run is a valid entity or list.
            </returns>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityProviderBaseCore`2.DataRequestingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="E:MTIMS.Data.Bases.EntityProviderBaseCore`2.DataRequesting">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.OnDataRequesting(MTIMS.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just before accessing the 
                data provider.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityProviderBaseCore`2.DataRequestedEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="E:MTIMS.Data.Bases.EntityProviderBaseCore`2.DataRequested">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.OnDataRequested(MTIMS.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityProviderBaseCore`2.DeepLoadingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="E:MTIMS.Data.Bases.EntityProviderBaseCore`2.DeepLoading">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.OnDeepLoading(MTIMS.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityProviderBaseCore`2.DeepSavingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="E:MTIMS.Data.Bases.EntityProviderBaseCore`2.DeepSaving">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityProviderBaseCore`2.OnDeepSaving(MTIMS.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DeepSessionEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSessionEventArgs.#ctor(MTIMS.Data.Bases.DeepSession,System.String,System.Enum,MTIMS.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
            <param name="deepSession">The Current Deep Session.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSessionEventArgs.#ctor(MTIMS.Data.Bases.DeepSession,System.String,System.Enum,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="list">The list.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSessionEventArgs.#ctor(MTIMS.Data.Bases.DeepSession,System.String,System.Enum,MTIMS.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key.</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.DeepSession">
            <summary>
            Gets or sets the current DeepSession.
            </summary>
            <value>The DeepSession.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.CurrentTypePropertyKey">
            <summary>
            Gets or Sets the name of the current type property key that 
            will be used to determine if the property will be run in the deep session.
            </summary>
            <value>A string value of the type property key.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.DeepTypeValue">
            <summary>
             The current DeepType Value, Either <c>DeepLoadType</c>, or <c>DeepSaveType</c>.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property of the event.
            </summary>
            <value>Current Cancel Value.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSessionEventArgs.Skip">
            <summary>
            Gets or sets the current Skip value.  
            Setting this property will skip the current Deep Property.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:MTIMS.Data.Bases.CommandEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.CommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,MTIMS.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:MTIMS.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,MTIMS.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:MTIMS.Data.Bases.CommandEventArgs.Command">
            <summary>
            Gets or sets the current command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.CommandEventArgs.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.CommandEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.CommandEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:MTIMS.Data.Bases.DeepSession">
            <summary>
            Keeps a weak reference of the entire deep transaction for tracking purposes.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSession"/> class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.GetSessionObjects">
            <summary>
            Gets the set of current loaded objects.
            </summary>
            <returns>a list of already run objects</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.AddRun(System.Object,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.ContainsType(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.ContainsTypeExcluded(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.HasRun(System.Object,System.String)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.GetReference(System.Object,System.String)">
            <summary>
            Get's the reference of the object that has run
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	object of the run reference
            </returns>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSession.DeepSessionInnerList">
            <summary>
            Gets the Deep Session nner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSession.CancelSession">
            <summary>
            If set to true, any further requests for this deep session will be canceled.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.DeepSession.SkipChildren">
            <summary>
            If set to true, any further requests for this deep session requesting to Load a child collection will be skipped.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.DeepSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:MTIMS.Data.Bases.DeepSaveHandle`1">
            <summary>
            Handler for the deep save
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DeepSaveSingleHandle`1">
            <summary>
            Handler for the single deep save
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DeepLoadHandle`1">
            <summary>
            Handler for the deep load
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.DeepLoadSingleHandle`1">
            <summary>
            Handler for the single deep load
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="P:MTIMS.Data.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:MTIMS.Data.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:MTIMS.Data.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:MTIMS.Data.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetAll(MTIMS.Data.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetAll(MTIMS.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetAll(MTIMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(MTIMS.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(MTIMS.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(MTIMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(MTIMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.Get(MTIMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(MTIMS.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(MTIMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:MTIMS.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(MTIMS.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="T:MTIMS.Data.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DataRepository.LoadProvider(MTIMS.Data.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:MTIMS.Data.DataRepository.LoadProvider(MTIMS.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:MTIMS.Data.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:MTIMS.Data.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="M:MTIMS.Data.DataRepository.CreateTransaction">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MTIMS.Data.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="T:MTIMS.Data.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:MTIMS.Data.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmBoPhanProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmBoPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuNhapProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuNhapNbProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuNhapCtProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuChuyenCtProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuMuonProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuNhapNbCtProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuChuyenSpProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuTraHangProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuTraHangCtProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuYeuCauProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuXuatProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuYeuCauCtProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuTraHangSpProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuXuatCtProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuXuatSpProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhPhieuChuyenProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmChiNhanhProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmChiNhanh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmNhomVatTuProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmLoaiVatTuProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmKhoHangProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmKhoHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmDonViTinhProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmDonViTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmNguonKhoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmNguonKho"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtVaiTroProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtVaiTro"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmNguonNhapProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmNguonNhap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmLoaiVatTuViTriProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.KhSanPhamProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhSanPham"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtQuyenHanProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtQuyenHan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtNhatKyProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtNhatKy"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtNguoiDungProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtNguoiDung"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.DmViTriProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmViTri"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtNguoiDungVaiTroProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtThietLapProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtThietLap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:MTIMS.Data.DataRepository.HtBanQuyenProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtBanQuyen"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:MTIMS.Data.DmBoPhanFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmBoPhan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmBoPhanFilters.#ctor">
            <summary>
            Initializes a new instance of the DmBoPhanFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmBoPhanFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmBoPhanFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmBoPhanQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmBoPhanParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmBoPhan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmBoPhanQuery.#ctor">
            <summary>
            Initializes a new instance of the DmBoPhanQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmBoPhanQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmBoPhanQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmBoPhanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuNhapParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapNbFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapNbQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuNhapNbParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapCtFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapCtFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapCtFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapCtFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapCtQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuNhapCtParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapCtQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapCtQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapCtQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuChuyenCtFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenCtFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenCtFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenCtFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuChuyenCtQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenCtParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenCtQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenCtQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenCtQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuMuonFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuMuonFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuMuonFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuMuonFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuMuonFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuMuonQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuMuonParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuMuon"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuMuonQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuMuonQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuMuonQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuMuonQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuMuonQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapNbCtFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbCtFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbCtFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbCtFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuNhapNbCtQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuNhapNbCtParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbCtQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbCtQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuNhapNbCtQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuNhapNbCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuChuyenSpFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenSpFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenSpFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenSpFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuChuyenSpQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenSpParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenSpQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenSpQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenSpQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenSpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuTraHangFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuTraHangQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuTraHangCtFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangCtFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangCtFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangCtFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuTraHangCtQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangCtParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangCtQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangCtQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangCtQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuYeuCauFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuYeuCauQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuYeuCauParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuXuatFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuXuatQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuXuatParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuat"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuYeuCauCtFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauCtFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauCtFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauCtFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuYeuCauCtQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuYeuCauCtParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauCtQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauCtQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuYeuCauCtQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuYeuCauCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuTraHangSpFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangSpFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangSpFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangSpFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuTraHangSpQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuTraHangSpParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangSpQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangSpQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuTraHangSpQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuTraHangSpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuXuatCtFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatCtFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatCtFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatCtFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuXuatCtQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuXuatCtParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatCtQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatCtQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatCtQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatCtQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuXuatSpFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatSpFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatSpFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatSpFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuXuatSpQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuXuatSpParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatSpQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatSpQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuXuatSpQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuXuatSpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuChuyenFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenFilters.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhPhieuChuyenQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhPhieuChuyenParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenQuery.#ctor">
            <summary>
            Initializes a new instance of the KhPhieuChuyenQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhPhieuChuyenQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhPhieuChuyenQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmChiNhanhFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmChiNhanh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmChiNhanhFilters.#ctor">
            <summary>
            Initializes a new instance of the DmChiNhanhFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmChiNhanhFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmChiNhanhFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmChiNhanhQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmChiNhanhParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmChiNhanh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmChiNhanhQuery.#ctor">
            <summary>
            Initializes a new instance of the DmChiNhanhQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmChiNhanhQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmChiNhanhQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmChiNhanhQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmNhomVatTuFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNhomVatTuFilters.#ctor">
            <summary>
            Initializes a new instance of the DmNhomVatTuFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNhomVatTuFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmNhomVatTuFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmNhomVatTuQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmNhomVatTuParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNhomVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNhomVatTuQuery.#ctor">
            <summary>
            Initializes a new instance of the DmNhomVatTuQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNhomVatTuQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmNhomVatTuQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNhomVatTuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmLoaiVatTuFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuFilters.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmLoaiVatTuQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmLoaiVatTuParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuQuery.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmKhoHangFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmKhoHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmKhoHangFilters.#ctor">
            <summary>
            Initializes a new instance of the DmKhoHangFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmKhoHangFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmKhoHangFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmKhoHangQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmKhoHangParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmKhoHang"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmKhoHangQuery.#ctor">
            <summary>
            Initializes a new instance of the DmKhoHangQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmKhoHangQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmKhoHangQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmKhoHangQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmDonViTinhFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmDonViTinh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmDonViTinhFilters.#ctor">
            <summary>
            Initializes a new instance of the DmDonViTinhFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmDonViTinhFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmDonViTinhFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmDonViTinhQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmDonViTinhParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmDonViTinh"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmDonViTinhQuery.#ctor">
            <summary>
            Initializes a new instance of the DmDonViTinhQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmDonViTinhQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmDonViTinhQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmDonViTinhQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmNguonKhoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonKho"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonKhoFilters.#ctor">
            <summary>
            Initializes a new instance of the DmNguonKhoFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonKhoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmNguonKhoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmNguonKhoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmNguonKhoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonKho"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonKhoQuery.#ctor">
            <summary>
            Initializes a new instance of the DmNguonKhoQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonKhoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmNguonKhoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonKhoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtVaiTroFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtVaiTroFilters.#ctor">
            <summary>
            Initializes a new instance of the HtVaiTroFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtVaiTroFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtVaiTroFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtVaiTroQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtVaiTroParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtVaiTroQuery.#ctor">
            <summary>
            Initializes a new instance of the HtVaiTroQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtVaiTroQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtVaiTroQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtVaiTroQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmNguonNhapFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonNhapFilters.#ctor">
            <summary>
            Initializes a new instance of the DmNguonNhapFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonNhapFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmNguonNhapFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmNguonNhapQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmNguonNhapParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmNguonNhap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonNhapQuery.#ctor">
            <summary>
            Initializes a new instance of the DmNguonNhapQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmNguonNhapQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmNguonNhapQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmNguonNhapQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmLoaiVatTuViTriFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuViTriFilters.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuViTriFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuViTriFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmLoaiVatTuViTriQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmLoaiVatTuViTriParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuViTriQuery.#ctor">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuViTriQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmLoaiVatTuViTriQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmLoaiVatTuViTriQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhSanPhamFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhSanPham"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhSanPhamFilters.#ctor">
            <summary>
            Initializes a new instance of the KhSanPhamFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhSanPhamFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhSanPhamFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.KhSanPhamQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.KhSanPhamParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.KhSanPham"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhSanPhamQuery.#ctor">
            <summary>
            Initializes a new instance of the KhSanPhamQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.KhSanPhamQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.KhSanPhamQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KhSanPhamQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtQuyenHanFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtQuyenHan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtQuyenHanFilters.#ctor">
            <summary>
            Initializes a new instance of the HtQuyenHanFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtQuyenHanFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtQuyenHanFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtQuyenHanQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtQuyenHanParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtQuyenHan"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtQuyenHanQuery.#ctor">
            <summary>
            Initializes a new instance of the HtQuyenHanQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtQuyenHanQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtQuyenHanQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtQuyenHanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtNhatKyFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNhatKy"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNhatKyFilters.#ctor">
            <summary>
            Initializes a new instance of the HtNhatKyFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNhatKyFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtNhatKyFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtNhatKyQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtNhatKyParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNhatKy"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNhatKyQuery.#ctor">
            <summary>
            Initializes a new instance of the HtNhatKyQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNhatKyQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtNhatKyQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNhatKyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtNguoiDungFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDung"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungFilters.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtNguoiDungQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtNguoiDungParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDung"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungQuery.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmViTriFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmViTriFilters.#ctor">
            <summary>
            Initializes a new instance of the DmViTriFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmViTriFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmViTriFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.DmViTriQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.DmViTriParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.DmViTri"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmViTriQuery.#ctor">
            <summary>
            Initializes a new instance of the DmViTriQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.DmViTriQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.DmViTriQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmViTriQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtNguoiDungVaiTroFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungVaiTroFilters.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungVaiTroFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungVaiTroFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtNguoiDungVaiTroQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtNguoiDungVaiTroParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungVaiTroQuery.#ctor">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungVaiTroQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtNguoiDungVaiTroQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtNguoiDungVaiTroQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtThietLapFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtThietLap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtThietLapFilters.#ctor">
            <summary>
            Initializes a new instance of the HtThietLapFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtThietLapFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtThietLapFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtThietLapQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtThietLapParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtThietLap"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtThietLapQuery.#ctor">
            <summary>
            Initializes a new instance of the HtThietLapQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtThietLapQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtThietLapQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtThietLapQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtBanQuyenFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtBanQuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtBanQuyenFilters.#ctor">
            <summary>
            Initializes a new instance of the HtBanQuyenFilters class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtBanQuyenFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtBanQuyenFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.HtBanQuyenQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:MTIMS.Data.Bases.HtBanQuyenParameterBuilder"/> class
            that is used exclusively with a <see cref="T:MTIMS.Entities.HtBanQuyen"/> object.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtBanQuyenQuery.#ctor">
            <summary>
            Initializes a new instance of the HtBanQuyenQuery class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.HtBanQuyenQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.HtBanQuyenQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the HtBanQuyenQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:MTIMS.Data.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.#ctor(System.String,MTIMS.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:MTIMS.Data.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="T:MTIMS.Data.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.#ctor(System.String,MTIMS.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.#ctor(System.String,MTIMS.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:MTIMS.Data.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.#ctor(System.String,MTIMS.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.#ctor(System.String,MTIMS.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:MTIMS.Data.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:MTIMS.Data.StringBuilderExpression">
            <summary>
            Represents a SQL filter builder expression enumeration.
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendEquals">
            <summary>
            AppendEquals
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendNotEquals">
            <summary>
            AppendNotEquals
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendIn">
            <summary>
            AppendIn
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendNotIn">
            <summary>
            AppendNotIn
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendInQuery">
            <summary>
            AppendInQuery
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendNotInQuery">
            <summary>
            AppendNotInQuery
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendRange">
            <summary>
            AppendRange
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendNotRange">
            <summary>
            AppendNotRange
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendIsNull">
            <summary>
            AppendIsNull
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendIsNotNull">
            <summary>
            AppendIsNotNull
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendGreaterThan">
            <summary>
            AppendGreaterThan
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendGreaterThanOrEqual">
            <summary>
            AppendGreaterThanOrEqual
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendLessThan">
            <summary>
            AppendLessThan
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendLessThanOrEqual">
            <summary>
            AppendLessThanOrEqual
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendStartsWith">
            <summary>
            AppendStartsWith
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendEndsWith">
            <summary>
            AppendEndsWith
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendContains">
            <summary>
            AppendContains
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendNotContains">
            <summary>
            AppendNotContains
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="F:MTIMS.Data.StringBuilderExpression.AppendNotLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="T:MTIMS.Data.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIn(System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIn(System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotIn(System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotIn(System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendStartsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendEndsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendNotLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values">Comma string with the in parameters already in one string</param>
            <param name="encode">tells whether or not to enclose the parameters with ' and to replace ' with '' within the parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.GetInQueryValues(System.String[],System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values">String Array with the in parameters</param>
            <param name="encode">tells whether or not to enclose the parameters with ' and to replace ' with '' within the parameters.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.BeginGroup">
            <summary>
            Begins a new group of parameters by adding an open parenthesis "("
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.BeginGroup(System.String)">
            <summary>
            Begins a new groups of parameters using the specified junction operator
            </summary>
            <param name="junction">The junction operator to be used</param>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.EndGroup">
            <summary>
            Ends a group of parameters by add a closing parenthesis ")"
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlStringBuilder.EnsureGroups">
            <summary>
            Makes sure that all groups have been ended (each call to BeginGroup has a corresponding EndGroup)
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlStringBuilder.Length">
            <summary>
            Gets or sets the length of the internal StringBuilder object.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:MTIMS.Data.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIn(`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIn(`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendStartsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendEndsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.AppendNotLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendNotContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:MTIMS.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MTIMS.Data.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ParameterizedSqlFilterBuilder`1.MTIMS#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a collection of <see cref="T:MTIMS.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:MTIMS.Data.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:MTIMS.Data.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:MTIMS.Data.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlFilterParameterCollection.MTIMS#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:MTIMS.Data.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlFilterParameter.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlFilterParameter.GetValue">
            <summary>
            Gets the current value converted to the appropriate <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.IFilterParameterCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:MTIMS.Data.SqlFilterParameterCollection"/> 
              objects to use dynamic and parameterized filters.
            </summary>
        </member>
        <member name="M:MTIMS.Data.IFilterParameterCollection.GetParameters">
            <summary>
            Gets a collection of <see cref="T:MTIMS.Data.SqlFilterParameter"/> objects
            </summary>
            <returns><see cref="T:MTIMS.Data.SqlFilterParameterCollection"/> object</returns>
        </member>
        <member name="T:MTIMS.Data.SqlSortBuilder`1">
            <summary>
            Allows for building SQL OrderBy expressions using strongly-typed column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.Append(System.Enum,MTIMS.Data.SqlSortDirection)">
            <summary>
            Appends the specified column and sorts it by the specified SqlSortDirection 
            </summary>
            <param name="column">The column to sort</param>
            <param name="sortDirection">The specified column's sort direction</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.AppendASC(System.Enum)">
            <summary>
            Appends the specified column and sorts it Ascending
            </summary>
            <param name="column">The column to sort</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.AppendDESC(System.Enum)">
            <summary>
            Appends the specified column and sorts it Descending
            </summary>
            <param name="column">The column to sort</param>
            <returns></returns>
        </member>
        <member name="F:MTIMS.Data.SqlSortBuilder`1.sortColumns">
            <summary>
            The Sort Columns member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlSortBuilder`1.SortColumns">
            <summary>
            Gets or sets the SortColumns property.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.AddColumn(System.Enum,MTIMS.Data.SqlSortDirection)">
            <summary>
            Adds a column to the sort builder
            </summary>
            <param name="column">The entity's column to sort by</param>
            <param name="sortDirection">The sort direction</param>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.ToString">
            <summary>
            Provides the actual SQL sort string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.GetSortColumns">
            <summary>
            Gets the current collection of <see cref="T:MTIMS.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlSortBuilder`1.MTIMS#Data#ISortColumnCollection#GetSortColumns">
            <summary>
            Gets a collection of <see cref="T:MTIMS.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlSortColumnCollection">
            <summary>
            A collection of <see cref="T:MTIMS.Data.SqlSortColumn"/> objects.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlSortColumnCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:MTIMS.Data.SqlSortColumnCollection.ToString">
            <summary>
            Provides the actual SQL sort string.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MTIMS.Data.SqlSortColumnCollection._currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlSortColumnCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlSortColumnCollection.sortExpression">
            <summary>
            The SortExpression member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlSortColumnCollection.SortExpression">
            <summary>
            Gets or sets the SortExpression property.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlSortColumnCollection.MTIMS#Data#ISortColumnCollection#GetSortColumns">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlSortColumn">
            <summary>
            Represents the information of a sorted column.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlSortColumn.#ctor(System.Enum,MTIMS.Data.SqlSortDirection)">
            <summary>
            Initializes a new instance of the SqlSortColumn class.
            </summary>
            <param name="column"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="F:MTIMS.Data.SqlSortColumn._column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlSortColumn.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlSortColumn._sortDirection">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlSortColumn.SortDirection">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="T:MTIMS.Data.ISortColumnCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:MTIMS.Data.SqlSortColumnCollection"/> 
              objects to generate an OrderBy clause.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ISortColumnCollection.GetSortColumns">
            <summary>
            Gets a collection of <see cref="T:MTIMS.Data.SqlSortColumn"/> objects
            </summary>
            <returns><see cref="T:MTIMS.Data.SqlSortColumnCollection"/> object</returns>
        </member>
        <member name="T:MTIMS.Data.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlUtil.PAGE_INDEX">
            <summary>
            PageIndex Temp Table
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:MTIMS.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:MTIMS.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:MTIMS.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotContains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotContains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotContains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotContains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotLike(System.String,System.String)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotLike(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotLike(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:MTIMS.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.NotLike(System.String)">
            <summary>
            Encodes the value for a <see cref="F:MTIMS.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.GetNotLikeFormat(System.Boolean)">
            <summary>
            Gets the not like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.GetNotLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the not like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.NotContains">
            <summary>
            Represents NOT LIKE %value%.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlComparisonType.NotLike">
            <summary>
            Represents NOT LIKE value.
            </summary>
        </member>
        <member name="T:MTIMS.Data.SqlFilterType">
            <summary>
            Enumeration of SQL Filter Types.
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlFilterType.Word">
            <summary>
            Represents an Individual Word filter
            </summary>
            <example>(if using <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/>) CompanyName LIKE "%Acme" AND CompanyName LIKE "Company%"</example>
        </member>
        <member name="F:MTIMS.Data.SqlFilterType.Phrase">
            <summary>
            Represents a Phrase filter
            </summary>
            <example>(if using <see cref="F:MTIMS.Data.SqlComparisonType.Contains"/>) CompanyName LIKE "%Acme Company%"</example>
        </member>
        <member name="T:MTIMS.Data.SqlSortDirection">
            <summary>
            Enumeration of SQL expression Sort Directions
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlSortDirection.ASC">
            <summary>
            Database Ascending
            </summary>
        </member>
        <member name="F:MTIMS.Data.SqlSortDirection.DESC">
            <summary>
            Database Descending
            </summary>
        </member>
        <member name="T:MTIMS.Data.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:MTIMS.Data.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="P:MTIMS.Data.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:MTIMS.Data.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:MTIMS.Data.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:MTIMS.Data.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:MTIMS.Data.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="P:MTIMS.Data.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="M:MTIMS.Data.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:MTIMS.Data.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:MTIMS.Data.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:MTIMS.Data.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:MTIMS.Data.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:MTIMS.Data.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:MTIMS.Data.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:MTIMS.Data.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:MTIMS.Data.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:MTIMS.Data.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:MTIMS.Data.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:MTIMS.Data.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader" />, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:MTIMS.Data.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:MTIMS.Data.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:MTIMS.Data.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the scalar object. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.Utility.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returnsthe scalar object. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.ITransactionManager">
            <summary>
            TransactionManager interface
            </summary>
        </member>
        <member name="M:MTIMS.Data.ITransactionManager.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:MTIMS.Data.ITransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:MTIMS.Data.ITransactionManager.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ITransactionManager.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.ITransactionManager.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="M:MTIMS.Data.ITransactionManager.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ITransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:MTIMS.Data.ITransactionManager.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MTIMS.Data.ITransactionManager.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.ITransactionManager.TransactionObject">
            <summary>
            Gets the transaction object.
            </summary>
            <value>The transaction object.</value>
        </member>
        <member name="T:MTIMS.Data.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.TransactionManager.ConnectionString">
            <summary>
            Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:MTIMS.Data.TransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:MTIMS.Data.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:MTIMS.Data.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:MTIMS.Data.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MTIMS.Data.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MTIMS.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MTIMS.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="providerInvariantName">Name of the provider invariant.</param>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.Commit">
            <summary>
            Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:MTIMS.Data.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MTIMS.Data.FileConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize 
            configuration, so the configuration file must be a valid .NET Framework configuration file.
            </remarks>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MTIMS.Data.FileConfigurationSource"/> class.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MTIMS.Data.FileConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MTIMS.Data.FileConfigurationSource"/> that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter, polling every 
            <paramref name="refreshInterval"/> milliseconds.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.DoRemove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source using encryption.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.<br/>
            If a configuration section was retrieved from an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/>, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
            <param name="protectionProviderName">The name of the protection provider to use when encrypting the section.</param>
            <exception cref="T:System.InvalidOperationException">The configuration section was retrieved from an instance of  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> or <see cref="T:System.Configuration.Configuration"/> and cannot be added to the current source.</exception>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration and saves the configuration file.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file and saves the configuration file using encryption.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
            <param name="protectionProvider">The name of the protection provider to use when encrypting the section.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have 
            suffered notifications and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main 
            configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external 
            files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and 
            should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections 
            that have changed their location.</param>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should 
            be refreshed.</param>
        </member>
        <member name="T:MTIMS.Data.FileConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:MTIMS.Data.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:MTIMS.Data.FileConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:MTIMS.Data.FileConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:MTIMS.Data.IEntityProvider`2">
            <summary>Defines the common data access methods that can be used by the ProviderDataSource control to interact with the underlying data store.</summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:MTIMS.Data.IEntityProvider`2.Get(MTIMS.Data.TransactionManager,`1)">
            <summary>Gets a row from the DataSource based on its primary key.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityProvider`2.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityProvider`2.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityProvider`2.Insert(MTIMS.Data.TransactionManager,`0)">
            <summary>Inserts a row into the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityProvider`2.Update(MTIMS.Data.TransactionManager,`0)">
            <summary>Updates an existing row in the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityProvider`2.Delete(MTIMS.Data.TransactionManager,`0)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="T:MTIMS.Data.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:MTIMS.Data.IEntityViewProvider`1.Get(MTIMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityViewProvider`1.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:MTIMS.Data.IEntityViewProvider`1.GetAll(MTIMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
    </members>
</doc>
