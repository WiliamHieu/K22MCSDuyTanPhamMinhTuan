<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MTIMS.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:MTIMS.Data.SqlClient.SqlDmBoPhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmBoPhan"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmBoPhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmBoPhan"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmBoPhan objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_BoPhan index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmBoPhan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmBoPhan})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmBoPhan object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmBoPhan)">
            <summary>Inserts a MTIMS.Entities.DmBoPhan object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmBoPhan object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmBoPhan object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmBoPhan)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmBoPhan object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmBoPhan object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmBoPhanProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetByIdKhoChuyen(MTIMS.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_DM_KhoHang_IdKhoChuyen key. FK_KH_PhieuNhap_DM_KhoHang_IdKhoChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_DM_NguonNhap key. FK_KH_PhieuNhap_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetByIdPhieuChuyen(MTIMS.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_KH_PhieuChuyen key. FK_KH_PhieuNhap_KH_PhieuChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhap objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetByIdPhieuXuat(MTIMS.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the IX_U_F_KH_PhieuNhap_IdPhieuXuat index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuat"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhap})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhap)">
            <summary>Inserts a MTIMS.Entities.KhPhieuNhap object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhap object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhap)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhap object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuNhap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.Update(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean},System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhap_Update' stored procedure.</summary>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idNguonNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="noHoaDon"> A <c>System.Boolean?</c> instance.</param>
            <param name="soHoaDon"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhap_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.XoaYeuCau(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhap_XoaYeuCau' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.UpdateYeuCau(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhap_UpdateYeuCau' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="idLoaiVatTu"> A <c>System.Guid?</c> instance.</param>
            <param name="chenhLech"> A <c>System.Decimal?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.ThemYeuCau(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhap_ThemYeuCau' stored procedure.</summary>
            <param name="idPhieuNhap"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapCt"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhap_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_KhoHang key. FK_KH_PhieuNhapNb_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetByIdKhoChuyen(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_KhoHang_IdKhoChuyen key. FK_KH_PhieuNhapNb_DM_KhoHang_IdKhoChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_DM_NguonNhap key. FK_KH_PhieuNhapNb_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetByIdPhieuChuyen(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_KH_PhieuChuyen key. FK_KH_PhieuNhapNb_KH_PhieuChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetByIdPhieuNhap(MTIMS.Data.TransactionManager,System.Nullable{System.Guid})">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_KH_PhieuNhap key. FK_KH_PhieuNhapNb_KH_PhieuNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNb objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhapNb index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhapNb})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhapNb object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNb)">
            <summary>Inserts a MTIMS.Entities.KhPhieuNhapNb object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhapNb object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhapNb object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNb)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhapNb object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuNhapNb object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhapNb_Delete' stored procedure.</summary>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuNhapNb_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.GetByIdPhieuNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhap_Ct_KH_PhieuNhap key. FK_KH_PhieuNhap_Ct_KH_PhieuNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhap_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.GetByIdPhieuNhapIdLoaiVatTuIdSanPham(MTIMS.Data.TransactionManager,System.Guid,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuNhap_Ct_IdPhieuNhap_IdLoaiVatTu_IdSanPham index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhap"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idSanPham"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhapCt})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhapCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapCt)">
            <summary>Inserts a MTIMS.Entities.KhPhieuNhapCt object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhapCt object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhapCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapCt)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhapCt object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuNhapCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapCtProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.GetByIdPhieuChuyen(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Ct_KH_PhieuChuyen key. FK_KH_PhieuChuyen_Ct_KH_PhieuChuyen Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.GetByIdPhieuChuyenIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuChuyen_Ct_IdPhieuChuyen_IdLoaiVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyen"></param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuChuyenCt})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuChuyenCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenCt)">
            <summary>Inserts a MTIMS.Entities.KhPhieuChuyenCt object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuChuyenCt object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuChuyenCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenCt)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuChuyenCt object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuChuyenCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenCtProviderBase.Update(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wraps the 'CustomGen_KH_PhieuChuyen_Ct_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuMuonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuMuonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_DM_KhoHang key. FK_KH_PhieuMuon_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_DM_LoaiVatTu key. FK_KH_PhieuMuon_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuMuon_KH_SanPham key. FK_KH_PhieuMuon_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuMuon objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuMuon index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuMuon})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuMuon object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuMuon)">
            <summary>Inserts a MTIMS.Entities.KhPhieuMuon object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuMuon object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuMuon object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuMuon)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuMuon object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuMuon object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>This method wraps the 'CustomGen_KH_PhieuMuon_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuMuon"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuMuonProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuMuon_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_DM_LoaiVatTu key. FK_KH_PhieuNhapNb_Ct_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetByIdPhieuNhapNb(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_KH_PhieuNhapNb key. FK_KH_PhieuNhapNb_Ct_KH_PhieuNhapNb Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhapNb"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuNhapNb_Ct_KH_SanPham key. FK_KH_PhieuNhapNb_Ct_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuNhapNbCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuNhapNb_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.GetByIdPhieuNhapNbIdLoaiVatTuIdSanPham(MTIMS.Data.TransactionManager,System.Guid,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuNhapNb_Ct_IdPhieuNhapNb_IdLoaiVatTu_IdSanPham index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuNhapNb"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idSanPham"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuNhapNbCt})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhapNbCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNbCt)">
            <summary>Inserts a MTIMS.Entities.KhPhieuNhapNbCt object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhapNbCt object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuNhapNbCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuNhapNbCt)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuNhapNbCt object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuNhapNbCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuNhapNbCtProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.GetByIdPhieuChuyenCt(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Sp_KH_PhieuChuyen_Ct key. FK_KH_PhieuChuyen_Sp_KH_PhieuChuyen_Ct Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuChuyenCt"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_Sp_KH_SanPham key. FK_KH_PhieuChuyen_Sp_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyenSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen_Sp index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuChuyenSp})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuChuyenSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenSp)">
            <summary>Inserts a MTIMS.Entities.KhPhieuChuyenSp object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuChuyenSp object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuChuyenSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyenSp)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuChuyenSp object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuChuyenSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenSpProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHang objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_DM_NguonNhap key. FK_KH_PhieuTraHang_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuTraHang})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuTraHang object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHang)">
            <summary>Inserts a MTIMS.Entities.KhPhieuTraHang object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuTraHang object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuTraHang object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHang)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuTraHang object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuTraHang object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_KH_PhieuTraHang_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuTraHang"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuTraHang_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Ct_DM_LoaiVatTu key. FK_KH_PhieuTraHang_Ct_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.GetByIdPhieuTraHang(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Ct_KH_PhieuTraHang key. FK_KH_PhieuTraHang_Ct_KH_PhieuTraHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuTraHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuTraHangCt})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuTraHangCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangCt)">
            <summary>Inserts a MTIMS.Entities.KhPhieuTraHangCt object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuTraHangCt object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuTraHangCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangCt)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuTraHangCt object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuTraHangCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangCtProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.GetByIdBoPhan(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_DM_BoPhan key. FK_KH_PhieuDatHang_DM_BoPhan Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idBoPhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_DM_KhoHang key. FK_KH_PhieuDatHang_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCau objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuDatHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuYeuCau})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuYeuCau object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCau)">
            <summary>Inserts a MTIMS.Entities.KhPhieuYeuCau object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuYeuCau object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuYeuCau object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCau)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuYeuCau object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuYeuCau object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_KH_PhieuYeuCau_Delete' stored procedure.</summary>
            <param name="idPhieuYeuCau"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuYeuCau_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuat objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.GetByIdBoPhan(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_DM_BoPhan key. FK_KH_PhieuXuat_DM_BoPhan Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idBoPhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuat objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuXuat})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuXuat object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuat)">
            <summary>Inserts a MTIMS.Entities.KhPhieuXuat object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuXuat object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuXuat object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuat)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuXuat object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuXuat object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_KH_PhieuXuat_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuXuat"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuXuat_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_Ct_DM_LoaiVatTu key. FK_KH_PhieuDatHang_Ct_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.GetByIdPhieuYeuCau(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuDatHang_Ct_KH_PhieuDatHang key. FK_KH_PhieuDatHang_Ct_KH_PhieuDatHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuYeuCau"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuYeuCauCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuDatHang_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuYeuCauCt})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuYeuCauCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCauCt)">
            <summary>Inserts a MTIMS.Entities.KhPhieuYeuCauCt object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuYeuCauCt object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuYeuCauCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuYeuCauCt)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuYeuCauCt object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuYeuCauCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuYeuCauCtProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.GetByIdPhieuTraHangCt(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Sp_KH_PhieuTraHang_Ct key. FK_KH_PhieuTraHang_Sp_KH_PhieuTraHang_Ct Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuTraHangCt"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuTraHang_Sp_KH_SanPham key. FK_KH_PhieuTraHang_Sp_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuTraHangSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuTraHang_Sp index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuTraHangSp})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuTraHangSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangSp)">
            <summary>Inserts a MTIMS.Entities.KhPhieuTraHangSp object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuTraHangSp object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuTraHangSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuTraHangSp)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuTraHangSp object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuTraHangSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuTraHangSpProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatCt objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.GetByIdPhieuXuat(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Ct_KH_PhieuXuat key. FK_KH_PhieuXuat_Ct_KH_PhieuXuat Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuat"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatCt objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat_Ct index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.GetByIdPhieuXuatIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the UQ_KH_PhieuXuat_Ct_IdPhieuXuat_IdLoaiVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuat"></param>
            <param name="_idLoaiVatTu"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuXuatCt})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuXuatCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatCt)">
            <summary>Inserts a MTIMS.Entities.KhPhieuXuatCt object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuXuatCt object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuXuatCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatCt)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuXuatCt object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuXuatCt object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatCtProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.GetByIdPhieuXuatCt(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Sp_KH_PhieuXuat_Ct key. FK_KH_PhieuXuat_Sp_KH_PhieuXuat_Ct Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idPhieuXuatCt"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuXuat_Sp_KH_SanPham key. FK_KH_PhieuXuat_Sp_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuXuatSp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuXuat_Sp index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuXuatSp})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuXuatSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatSp)">
            <summary>Inserts a MTIMS.Entities.KhPhieuXuatSp object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuXuatSp object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuXuatSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuXuatSp)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuXuatSp object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuXuatSp object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuXuatSpProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyen objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.GetByIdKhoNhan(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_PhieuChuyen_DM_KhoHang_IdKhoNhan key. FK_KH_PhieuChuyen_DM_KhoHang_IdKhoNhan Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoNhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhPhieuChuyen objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_PhieuChuyen index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhPhieuChuyen})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuChuyen object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyen)">
            <summary>Inserts a MTIMS.Entities.KhPhieuChuyen object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuChuyen object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhPhieuChuyen object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhPhieuChuyen)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhPhieuChuyen object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhPhieuChuyen object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_KH_PhieuChuyen_Delete' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.Ct_Update(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>This method wraps the 'CustomGen_KH_PhieuChuyen_Ct_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieuChuyen"> A <c>System.Guid?</c> instance.</param>
            <param name="idPhieuNhapNb"> A <c>System.Guid?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhPhieuChuyenProviderBase.Get_SoPhieu(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.String,System.String)">
            <summary>This method wraps the 'CustomGen_KH_PhieuChuyen_Get_SoPhieu' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="maKhoHang"> A <c>System.String</c> instance.</param>
            <param name="monthYear"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmChiNhanhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmChiNhanh"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmChiNhanhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmChiNhanh"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmChiNhanh objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_DM_ChiNhanh index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmChiNhanh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmChiNhanh})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmChiNhanh object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmChiNhanh)">
            <summary>Inserts a MTIMS.Entities.DmChiNhanh object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmChiNhanh object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmChiNhanh object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmChiNhanh)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmChiNhanh object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmChiNhanh object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmChiNhanhProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmNhomVatTuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNhomVatTuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNhomVatTu objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NhomVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmNhomVatTu})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmNhomVatTu object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNhomVatTu)">
            <summary>Inserts a MTIMS.Entities.DmNhomVatTu object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmNhomVatTu object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmNhomVatTu object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNhomVatTu)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmNhomVatTu object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmNhomVatTu object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNhomVatTuProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.GetByIdDonViTinh(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTu_DM_DonViTinh key. FK_DM_LoaiVatTu_DM_DonViTinh Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idDonViTinh"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.GetByIdNhomVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTu_DM_NhomVatTu key. FK_DM_LoaiVatTu_DM_NhomVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNhomVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_LoaiVatTu index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmLoaiVatTu})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmLoaiVatTu object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTu)">
            <summary>Inserts a MTIMS.Entities.DmLoaiVatTu object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmLoaiVatTu object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmLoaiVatTu object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTu)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmLoaiVatTu object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmLoaiVatTu object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuProviderBase.Delete(MTIMS.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>This method wraps the 'CustomGen_DM_LoaiVatTu_Delete' stored procedure.</summary>
            <param name="idLoaiVatTu"> A <c>System.Guid?</c> instance.</param>
            <param name="deleteAll"> A <c>System.Boolean?</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmKhoHangProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmKhoHang"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmKhoHangProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmKhoHang"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmKhoHang objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.GetByIdChiNhanh(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_KhoHang_DM_ChiNhanh key. FK_DM_KhoHang_DM_ChiNhanh Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idChiNhanh"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmKhoHang objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_DM_KhoHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmKhoHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.GetByTenVietTat(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets rows from the datasource based on the UQ_DM_KhoHang_TenVietTat index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_tenVietTat"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmKhoHang"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmKhoHang})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmKhoHang object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmKhoHang)">
            <summary>Inserts a MTIMS.Entities.DmKhoHang object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmKhoHang object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmKhoHang object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmKhoHang)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmKhoHang object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmKhoHang object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmKhoHangProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmDonViTinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmDonViTinh"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmDonViTinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmDonViTinh"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmDonViTinh objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_DonViTinh index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmDonViTinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmDonViTinh})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmDonViTinh object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmDonViTinh)">
            <summary>Inserts a MTIMS.Entities.DmDonViTinh object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmDonViTinh object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmDonViTinh object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmDonViTinh)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmDonViTinh object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmDonViTinh object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmDonViTinhProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmNguonKhoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmNguonKho"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNguonKhoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmNguonKho"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_NguonKho_DM_KhoHang key. FK_DM_NguonKho_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_NguonKho_DM_NguonNhap key. FK_DM_NguonKho_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonKho objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NguonKho index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNguonKho"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmNguonKho})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmNguonKho object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonKho)">
            <summary>Inserts a MTIMS.Entities.DmNguonKho object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmNguonKho object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmNguonKho object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonKho)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmNguonKho object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmNguonKho object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonKhoProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtVaiTroProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtVaiTro"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtVaiTroProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtVaiTro"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_VaiTro index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtVaiTro"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtVaiTro})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtVaiTro object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtVaiTro)">
            <summary>Inserts a MTIMS.Entities.HtVaiTro object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtVaiTro object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtVaiTro object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtVaiTro)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtVaiTro object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtVaiTro object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtVaiTroProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmNguonNhapProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmNguonNhap"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNguonNhapProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmNguonNhap"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmNguonNhap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_NguonNhap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmNguonNhap"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmNguonNhap})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmNguonNhap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonNhap)">
            <summary>Inserts a MTIMS.Entities.DmNguonNhap object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmNguonNhap object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmNguonNhap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmNguonNhap)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmNguonNhap object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmNguonNhap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmNguonNhapProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_KhoHang key. FK_DM_LoaiVatTuViTri_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_LoaiVatTu key. FK_DM_LoaiVatTuViTri_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetByIdViTri(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_DM_LoaiVatTuViTri_DM_ViTri key. FK_DM_LoaiVatTuViTri_DM_ViTri Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idViTri"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmLoaiVatTuViTri objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetByIdKhoHangIdLoaiVatTuIdViTri(MTIMS.Data.TransactionManager,System.Int32,System.Guid,System.Guid)">
            <summary>Gets rows from the datasource based on the IX_DM_LoaiVatTuViTri index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <param name="_idLoaiVatTu"></param>
            <param name="_idViTri"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_LoaiVatTuViTri index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmLoaiVatTuViTri})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmLoaiVatTuViTri object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTuViTri)">
            <summary>Inserts a MTIMS.Entities.DmLoaiVatTuViTri object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmLoaiVatTuViTri object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmLoaiVatTuViTri object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmLoaiVatTuViTri)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmLoaiVatTuViTri object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmLoaiVatTuViTri object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmLoaiVatTuViTriProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhSanPhamProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhSanPham"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhSanPhamProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.KhSanPham"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_KhoHang key. FK_KH_SanPham_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetByIdLoaiVatTu(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_LoaiVatTu key. FK_KH_SanPham_DM_LoaiVatTu Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idLoaiVatTu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetByIdNguonNhap(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_DM_NguonNhap key. FK_KH_SanPham_DM_NguonNhap Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguonNhap"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetByIdSanPham(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the FK_KH_SanPham_KH_SanPham key. FK_KH_SanPham_KH_SanPham Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idSanPham"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.KhSanPham objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_KH_SanPham index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.KhSanPham"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.KhSanPham})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhSanPham object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.KhSanPham)">
            <summary>Inserts a MTIMS.Entities.KhSanPham object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhSanPham object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.KhSanPham object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.KhSanPham)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.KhSanPham object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.KhSanPham object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlKhSanPhamProviderBase.Update(MTIMS.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Guid},System.String)">
            <summary>This method wraps the 'CustomGen_KH_SanPham_Update' stored procedure.</summary>
            <param name="idKhoHang"> A <c>System.Int32?</c> instance.</param>
            <param name="idPhieu"> A <c>System.Guid?</c> instance.</param>
            <param name="loaiPhieu"> A <c>System.String</c> instance.</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtQuyenHanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtQuyenHan"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtQuyenHanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtQuyenHan"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtQuyenHan objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.GetByIdVaiTro(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_QuyenHan_HT_VaiTro key. FK_HT_QuyenHan_HT_VaiTro Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idVaiTro"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtQuyenHan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_QuyenHan index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtQuyenHan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtQuyenHan})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtQuyenHan object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtQuyenHan)">
            <summary>Inserts a MTIMS.Entities.HtQuyenHan object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtQuyenHan object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtQuyenHan object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtQuyenHan)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtQuyenHan object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtQuyenHan object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtQuyenHanProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtNhatKyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtNhatKy"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNhatKyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtNhatKy"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNhatKy objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_HT_NhatKy index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNhatKy"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtNhatKy})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtNhatKy object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNhatKy)">
            <summary>Inserts a MTIMS.Entities.HtNhatKy object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtNhatKy object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtNhatKy object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNhatKy)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtNhatKy object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtNhatKy object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNhatKyProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtNguoiDungProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtNguoiDung"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNguoiDungProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtNguoiDung"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDung objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_NguoiDung index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDung"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.GetByTenTruyCap(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets rows from the datasource based on the UQ_HT_NguoiDung_TenTruyCap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_tenTruyCap"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDung"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtNguoiDung})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtNguoiDung object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDung)">
            <summary>Inserts a MTIMS.Entities.HtNguoiDung object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtNguoiDung object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtNguoiDung object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDung)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtNguoiDung object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtNguoiDung object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmViTriProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmViTri"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmViTriProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlDmViTriProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.DmViTri"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmViTriProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlDmViTriProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.DmViTri objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.GetById(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Gets rows from the datasource based on the PK_DM_ViTri index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.DmViTri"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.DmViTri})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmViTri object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.DmViTri)">
            <summary>Inserts a MTIMS.Entities.DmViTri object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmViTri object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.DmViTri object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.DmViTri)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.DmViTri object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.DmViTri object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlDmViTriProviderBase.Delete(MTIMS.Data.TransactionManager,System.Guid)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetByIdKhoHang(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_DM_KhoHang key. FK_HT_NguoiDungVaiTro_DM_KhoHang Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idKhoHang"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetByIdNguoiDung(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_HT_NguoiDung key. FK_HT_NguoiDungVaiTro_HT_NguoiDung Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idNguoiDung"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetByIdVaiTro(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the FK_HT_NguoiDungVaiTro_HT_VaiTro key. FK_HT_NguoiDungVaiTro_HT_VaiTro Description: </summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idVaiTro"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtNguoiDungVaiTro objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_NguoiDungVaiTro index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.GetByIdVaiTroIdNguoiDungIdKhoHang(MTIMS.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>Gets rows from the datasource based on the UQ_HT_NguoiDungVaiTro_IdVaiTro_IdNguoiDung_IdKhoHang index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_idVaiTro"></param>
            <param name="_idNguoiDung"></param>
            <param name="_idKhoHang"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtNguoiDungVaiTro})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtNguoiDungVaiTro object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDungVaiTro)">
            <summary>Inserts a MTIMS.Entities.HtNguoiDungVaiTro object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtNguoiDungVaiTro object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtNguoiDungVaiTro object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtNguoiDungVaiTro)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtNguoiDungVaiTro object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtNguoiDungVaiTro object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtNguoiDungVaiTroProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtThietLapProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtThietLap"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtThietLapProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtThietLap"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtThietLap objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.GetById(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Gets rows from the datasource based on the PK_HT_ThietLap index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtThietLap"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtThietLap})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtThietLap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtThietLap)">
            <summary>Inserts a MTIMS.Entities.HtThietLap object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtThietLap object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtThietLap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtThietLap)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtThietLap object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtThietLap object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtThietLapProviderBase.Delete(MTIMS.Data.TransactionManager,System.Int32)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtBanQuyenProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtBanQuyen"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtBanQuyenProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:MTIMS.Entities.HtBanQuyen"/> entity.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.#ctor">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase"/> instance.</summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>Creates a new <see cref="T:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.UseStoredProcedure">
            <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.ProviderInvariantName">
            <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.GetTotalItems(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets number of rows from the DataSource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks></remarks>
            <returns>Returns a number of rows from the DataSource.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.GetPaged(MTIMS.Data.TransactionManager,System.String,System.String)">
            <summary>Gets a page of rows from the DataSource.</summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of MTIMS.Entities.HtBanQuyen objects.</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.GetByMaKichHoat(MTIMS.Data.TransactionManager,System.String)">
            <summary>Gets rows from the datasource based on the PK_HT_BanQuyen index.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="_maKichHoat"></param>
            <returns>Returns an instance of the <see cref="T:MTIMS.Entities.HtBanQuyen"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.BulkInsert(MTIMS.Data.TransactionManager,MTIMS.Entities.TList{MTIMS.Entities.HtBanQuyen})">
            <summary>Lets you efficiently bulk insert many entities to the database.</summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtBanQuyen object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.Insert(MTIMS.Data.TransactionManager,MTIMS.Entities.HtBanQuyen)">
            <summary>Inserts a MTIMS.Entities.HtBanQuyen object into the datasource using a transaction.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtBanQuyen object to insert.</param>
            <remarks>After inserting into the datasource, the MTIMS.Entities.HtBanQuyen object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.Update(MTIMS.Data.TransactionManager,MTIMS.Entities.HtBanQuyen)">
            <summary>Update an existing row in the datasource.</summary>
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <param name="entity">MTIMS.Entities.HtBanQuyen object to update.</param>
            <remarks>After updating the datasource, the MTIMS.Entities.HtBanQuyen object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlHtBanQuyenProviderBase.Delete(MTIMS.Data.TransactionManager,System.String)">
            <summary>Deletes a row from the DataSource.</summary>
            <param name="_maKichHoat">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:MTIMS.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:MTIMS.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:MTIMS.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:MTIMS.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmBoPhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmBoPhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmBoPhanProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmBoPhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuNhapProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuNhapNbProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhapNb"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapNbProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapNbProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuNhapCtProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhapCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapCtProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapCtProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuChuyenCtProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuChuyenCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuChuyenCtProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuChuyenCtProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuMuonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuMuon"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuMuonProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuMuonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuNhapNbCtProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuNhapNbCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapNbCtProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuNhapNbCtProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuChuyenSpProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuChuyenSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuChuyenSpProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuChuyenSpProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuTraHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuTraHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuTraHangProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuTraHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuTraHangCtProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuTraHangCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuTraHangCtProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuTraHangCtProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuYeuCauProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuYeuCau"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuYeuCauProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuYeuCauProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuXuatProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuXuat"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuXuatProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuXuatProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuYeuCauCtProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuYeuCauCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuYeuCauCtProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuYeuCauCtProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuTraHangSpProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuTraHangSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuTraHangSpProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuTraHangSpProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuXuatCtProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuXuatCt"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuXuatCtProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuXuatCtProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuXuatSpProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuXuatSp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuXuatSpProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuXuatSpProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhPhieuChuyenProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhPhieuChuyen"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuChuyenProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhPhieuChuyenProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmChiNhanhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmChiNhanh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmChiNhanhProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmChiNhanhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmNhomVatTuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmNhomVatTu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmNhomVatTuProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmNhomVatTuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmLoaiVatTuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmLoaiVatTu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmLoaiVatTuProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmLoaiVatTuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmKhoHangProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmKhoHang"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmKhoHangProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmKhoHangProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmDonViTinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmDonViTinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmDonViTinhProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmDonViTinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmNguonKhoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmNguonKho"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmNguonKhoProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmNguonKhoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtVaiTroProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtVaiTro"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtVaiTroProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtVaiTroProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmNguonNhapProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmNguonNhap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmNguonNhapProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmNguonNhapProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmLoaiVatTuViTriProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmLoaiVatTuViTri"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmLoaiVatTuViTriProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmLoaiVatTuViTriProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.KhSanPhamProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.KhSanPham"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhSanPhamProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlKhSanPhamProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtQuyenHanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtQuyenHan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtQuyenHanProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtQuyenHanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtNhatKyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtNhatKy"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtNhatKyProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtNhatKyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtNguoiDungProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtNguoiDung"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtNguoiDungProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtNguoiDungProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.DmViTriProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.DmViTri"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmViTriProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlDmViTriProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtNguoiDungVaiTroProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtNguoiDungVaiTro"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtNguoiDungVaiTroProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtNguoiDungVaiTroProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtThietLapProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtThietLap"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtThietLapProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtThietLapProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.HtBanQuyenProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:MTIMS.Entities.HtBanQuyen"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtBanQuyenProvider">
            <summary>
            Gets the current <see cref="P:MTIMS.Data.SqlClient.SqlNetTiersProvider.SqlHtBanQuyenProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(MTIMS.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(MTIMS.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:MTIMS.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:MTIMS.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:MTIMS.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:MTIMS.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MTIMS.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:MTIMS.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:MTIMS.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,MTIMS.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="M:MTIMS.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="T:MTIMS.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:MTIMS.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:MTIMS.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:MTIMS.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
