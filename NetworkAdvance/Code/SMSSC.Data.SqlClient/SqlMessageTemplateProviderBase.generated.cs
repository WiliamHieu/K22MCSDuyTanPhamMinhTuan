/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlMessageTemplateProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using SMSSC.Entities;
using SMSSC.Data;
using SMSSC.Data.Bases;

#endregion

namespace SMSSC.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="MessageTemplate"/> entity.
	///</summary>
	public abstract partial class SqlMessageTemplateProviderBase : MessageTemplateProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		/// <summary>Creates a new <see cref="SqlMessageTemplateProviderBase"/> instance.</summary>
		public SqlMessageTemplateProviderBase()
		{
		}
	
        /// <summary>Creates a new <see cref="SqlMessageTemplateProviderBase"/> instance. Uses connection string to connect to datasource.</summary>
        /// <param name="connectionString">The connection string to the database.</param>
        /// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
        /// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        public SqlMessageTemplateProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
        {
            this._connectionString = connectionString;
            this._useStoredProcedure = useStoredProcedure;
            this._providerInvariantName = providerInvariantName;
        }
	    #endregion "Constructors"
	
		#region Public properties
        /// <summary>Gets or sets the connection string.</summary>
        /// <value>The connection string.</value>
        public string ConnectionString
        {
            get {return this._connectionString;}
            set {this._connectionString = value;}
        }
        
        /// <summary>Gets or sets a value indicating whether to use stored procedures.</summary>
        /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        public bool UseStoredProcedure
        {
            get {return this._useStoredProcedure;}
            set {this._useStoredProcedure = value;}
        }
        
        /// <summary>Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.</summary>
        /// <value>The name of the provider invariant.</value>
        public string ProviderInvariantName
        {
            get { return this._providerInvariantName; }
            set { this._providerInvariantName = value; }
        }
	    #endregion
	
		#region GetTotalItems Methods
				
		/// <summary>Gets number of rows from the DataSource.</summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <remarks></remarks>
		/// <returns>Returns a number of rows from the DataSource.</returns>
		public override int GetTotalItems(TransactionManager transactionManager, string whereClause)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.usp_MessageTemplate_GetRowCount", _useStoredProcedure);
						
            database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);

			DataSet dsResult = null;
            
            int result = 0;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetTotalItems")); 
					
				if (transactionManager != null)
				{
					dsResult = Utility.ExecuteDataSet(transactionManager, commandWrapper);
				}
				else
				{
					dsResult = Utility.ExecuteDataSet(database, commandWrapper);
				}		
		
				result = Convert.ToInt32(dsResult.Tables[0].Rows[0][0]);
				
				//Provider Data Requested Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetTotalItems")); 
			}
			finally 
			{
				dsResult = null;	
				commandWrapper = null;	
			}
			return result;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>Gets a page of rows from the DataSource.</summary>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SMSSC.Entities.MessageTemplate objects.</returns>
		public override TList<MessageTemplate> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.usp_MessageTemplate_GetPaged", _useStoredProcedure);
		
            if (commandWrapper.CommandType == CommandType.Text && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
		
			IDataReader reader = null;
			//Create Collection
			TList<MessageTemplate> rows = new TList<MessageTemplate>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);

                //Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 
			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
	    
		#region Get By Foreign Key Functions
	    #endregion
        
		#region Get By Index Functions
		
        #region GetById
		/// <summary>Gets rows from the datasource based on the PK_MessageTemplate index.</summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <returns>Returns an instance of the <see cref="SMSSC.Entities.MessageTemplate"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override SMSSC.Entities.MessageTemplate GetById(TransactionManager transactionManager, System.Int32 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.usp_MessageTemplate_GetById", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
			
			IDataReader reader = null;
			TList<MessageTemplate> tmp = new TList<MessageTemplate>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, 0, int.MaxValue);
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) reader.Close();
				commandWrapper = null;
			}
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
		}
		#endregion
        
	    #endregion Get By Index Functions
        
		#region Insert Methods
		/// <summary>Lets you efficiently bulk insert many entities to the database.</summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>After inserting into the datasource, the SMSSC.Entities.MessageTemplate object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<SMSSC.Entities.MessageTemplate> entities)
		{
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "MessageTemplate";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("Id", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("Title", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("ContentText", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("Status", typeof(System.Int32));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("CreatedDate", typeof(System.DateTime));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("Note", typeof(System.String));
			col5.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("Id", "Id");
			bulkCopy.ColumnMappings.Add("Title", "Title");
			bulkCopy.ColumnMappings.Add("ContentText", "ContentText");
			bulkCopy.ColumnMappings.Add("Status", "Status");
			bulkCopy.ColumnMappings.Add("CreatedDate", "CreatedDate");
			bulkCopy.ColumnMappings.Add("Note", "Note");
			
			foreach(SMSSC.Entities.MessageTemplate entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				row["Id"] = entity.Id;
				row["Title"] = entity.Title;
				row["ContentText"] = entity.ContentText;
				row["Status"] = entity.Status;
				row["CreatedDate"] = entity.CreatedDate;
				row["Note"] = entity.Note;
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(SMSSC.Entities.MessageTemplate entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
				entity.AcceptChanges();
			}
		}
				
		/// <summary>Inserts a SMSSC.Entities.MessageTemplate object into the datasource using a transaction.</summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SMSSC.Entities.MessageTemplate object to insert.</param>
		/// <remarks>After inserting into the datasource, the SMSSC.Entities.MessageTemplate object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, SMSSC.Entities.MessageTemplate entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.usp_MessageTemplate_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@Title", DbType.String, entity.Title );
			database.AddInParameter(commandWrapper, "@ContentText", DbType.String, entity.ContentText );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32, entity.Status );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@Note", DbType.String, entity.Note );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int32)_id;
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion
        
		#region Update Methods
		/// <summary>Update an existing row in the datasource.</summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SMSSC.Entities.MessageTemplate object to update.</param>
		/// <remarks>After updating the datasource, the SMSSC.Entities.MessageTemplate object will be updated to refelect any changes made by the datasource. (ie: identity or computed columns)</remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, SMSSC.Entities.MessageTemplate entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.usp_MessageTemplate_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int32, entity.Id );
			database.AddInParameter(commandWrapper, "@Title", DbType.String, entity.Title );
			database.AddInParameter(commandWrapper, "@ContentText", DbType.String, entity.ContentText );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int32, entity.Status );
			database.AddInParameter(commandWrapper, "@CreatedDate", DbType.DateTime, entity.CreatedDate );
			database.AddInParameter(commandWrapper, "@Note", DbType.String, entity.Note );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
        
        #region Delete Functions
        /// <summary>Deletes a row from the DataSource.</summary>
        /// <param name="_id">. Primary Key.</param>	
        /// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
        /// <remarks>Deletes based on primary key(s).</remarks>
        /// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
        public override bool Delete(TransactionManager transactionManager, System.Int32 _id)
        {
            SqlDatabase database = new SqlDatabase(this._connectionString);
            DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.usp_MessageTemplate_Delete", _useStoredProcedure);
            database.AddInParameter(commandWrapper, "@Id", DbType.Int32, _id);
            
            //Provider Data Requesting Command Event
            OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

            int results = 0;
            
            if (transactionManager != null)
            {	
                results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
            }
            else
            {
                results = Utility.ExecuteNonQuery(database,commandWrapper);
            }
            
            //Stop Tracking Now that it has been updated and persisted.
            if (DataRepository.Provider.EnableEntityTracking)
            {
                string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(MessageTemplate),_id);
                EntityManager.StopTracking(entityKey);
            }
            
            //Provider Data Requested Command Event
            OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

            commandWrapper = null;
            
            return Convert.ToBoolean(results);
        }//end Delete
        #endregion
        
        #region Custom Methods
        #endregion
        
	}//end class
} // end namespace
