#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace ESMEDICAL.Data
{
    /// <summary>
    /// The query extension class for DiabetesRules.
    /// </summary>
    public static partial class DiabetesRulesExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static ESMEDICAL.Data.DiabetesRules GetByKey(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, int id)
        {
            var entity = queryable as System.Data.Linq.Table<ESMEDICAL.Data.DiabetesRules>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((ESMEDICAL.Data.EsMedicalDbContext)entity.Context, id);

            return queryable.FirstOrDefault(d => d.Id == id);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<ESMEDICAL.Data.DiabetesRules> table, int id)
        {
            return table.Delete(d => d.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ById(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, int id)
        {
            return queryable.Where(d => d.Id == id);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ById(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ComparisonOperator comparisonOperator, int id)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.Id > id);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.Id >= id);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.Id < id);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.Id <= id);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.Id != id);
                default:
                    return queryable.Where(d => d.Id == id);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="id">Id to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ById(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, int id, params int[] additionalValues)
        {
            var idList = new List<int> { id };

            if (additionalValues != null)
                idList.AddRange(additionalValues);

            if (idList.Count == 1)
                return queryable.ById(idList[0]);

            return queryable.ById(idList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Id"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ById(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<int> values)
        {
            return queryable.Where(d => values.Contains(d.Id));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGender(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string gender)
        {
            // support nulls
            return gender == null 
                ? queryable.Where(d => d.Gender == null) 
                : queryable.Where(d => d.Gender == gender);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGender(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string gender)
        {
            if (gender == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("gender", "Parameter 'gender' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Gender.Contains(gender));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Gender.StartsWith(gender));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Gender.EndsWith(gender));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Gender.Contains(gender) == false);
                case ContainmentOperator.NotEquals:
                    return gender == null 
                        ? queryable.Where(d => d.Gender != null) 
                        : queryable.Where(d => d.Gender != gender);
                default:
                    return gender == null 
                        ? queryable.Where(d => d.Gender == null) 
                        : queryable.Where(d => d.Gender == gender);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGender(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string gender, params string[] additionalValues)
        {
            var genderList = new List<string> { gender };

            if (additionalValues != null)
                genderList.AddRange(additionalValues);
            else
                genderList.Add(null);

            if (genderList.Count == 1)
                return queryable.ByGender(genderList[0]);

            return queryable.ByGender(genderList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGender(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Gender", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyuria"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polyuria">Polyuria to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyuria(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string polyuria)
        {
            // support nulls
            return polyuria == null 
                ? queryable.Where(d => d.Polyuria == null) 
                : queryable.Where(d => d.Polyuria == polyuria);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyuria"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polyuria">Polyuria to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyuria(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string polyuria)
        {
            if (polyuria == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("polyuria", "Parameter 'polyuria' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Polyuria.Contains(polyuria));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Polyuria.StartsWith(polyuria));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Polyuria.EndsWith(polyuria));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Polyuria.Contains(polyuria) == false);
                case ContainmentOperator.NotEquals:
                    return polyuria == null 
                        ? queryable.Where(d => d.Polyuria != null) 
                        : queryable.Where(d => d.Polyuria != polyuria);
                default:
                    return polyuria == null 
                        ? queryable.Where(d => d.Polyuria == null) 
                        : queryable.Where(d => d.Polyuria == polyuria);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyuria"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polyuria">Polyuria to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyuria(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string polyuria, params string[] additionalValues)
        {
            var polyuriaList = new List<string> { polyuria };

            if (additionalValues != null)
                polyuriaList.AddRange(additionalValues);
            else
                polyuriaList.Add(null);

            if (polyuriaList.Count == 1)
                return queryable.ByPolyuria(polyuriaList[0]);

            return queryable.ByPolyuria(polyuriaList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyuria"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyuria(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Polyuria", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polydipsia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polydipsia">Polydipsia to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolydipsia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string polydipsia)
        {
            // support nulls
            return polydipsia == null 
                ? queryable.Where(d => d.Polydipsia == null) 
                : queryable.Where(d => d.Polydipsia == polydipsia);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polydipsia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polydipsia">Polydipsia to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolydipsia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string polydipsia)
        {
            if (polydipsia == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("polydipsia", "Parameter 'polydipsia' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Polydipsia.Contains(polydipsia));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Polydipsia.StartsWith(polydipsia));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Polydipsia.EndsWith(polydipsia));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Polydipsia.Contains(polydipsia) == false);
                case ContainmentOperator.NotEquals:
                    return polydipsia == null 
                        ? queryable.Where(d => d.Polydipsia != null) 
                        : queryable.Where(d => d.Polydipsia != polydipsia);
                default:
                    return polydipsia == null 
                        ? queryable.Where(d => d.Polydipsia == null) 
                        : queryable.Where(d => d.Polydipsia == polydipsia);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polydipsia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polydipsia">Polydipsia to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolydipsia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string polydipsia, params string[] additionalValues)
        {
            var polydipsiaList = new List<string> { polydipsia };

            if (additionalValues != null)
                polydipsiaList.AddRange(additionalValues);
            else
                polydipsiaList.Add(null);

            if (polydipsiaList.Count == 1)
                return queryable.ByPolydipsia(polydipsiaList[0]);

            return queryable.ByPolydipsia(polydipsiaList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polydipsia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolydipsia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Polydipsia", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.SuddenWeightLoss"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suddenWeightLoss">SuddenWeightLoss to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> BySuddenWeightLoss(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string suddenWeightLoss)
        {
            // support nulls
            return suddenWeightLoss == null 
                ? queryable.Where(d => d.SuddenWeightLoss == null) 
                : queryable.Where(d => d.SuddenWeightLoss == suddenWeightLoss);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.SuddenWeightLoss"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suddenWeightLoss">SuddenWeightLoss to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> BySuddenWeightLoss(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string suddenWeightLoss)
        {
            if (suddenWeightLoss == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("suddenWeightLoss", "Parameter 'suddenWeightLoss' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.SuddenWeightLoss.Contains(suddenWeightLoss));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.SuddenWeightLoss.StartsWith(suddenWeightLoss));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.SuddenWeightLoss.EndsWith(suddenWeightLoss));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.SuddenWeightLoss.Contains(suddenWeightLoss) == false);
                case ContainmentOperator.NotEquals:
                    return suddenWeightLoss == null 
                        ? queryable.Where(d => d.SuddenWeightLoss != null) 
                        : queryable.Where(d => d.SuddenWeightLoss != suddenWeightLoss);
                default:
                    return suddenWeightLoss == null 
                        ? queryable.Where(d => d.SuddenWeightLoss == null) 
                        : queryable.Where(d => d.SuddenWeightLoss == suddenWeightLoss);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.SuddenWeightLoss"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="suddenWeightLoss">SuddenWeightLoss to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> BySuddenWeightLoss(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string suddenWeightLoss, params string[] additionalValues)
        {
            var suddenWeightLossList = new List<string> { suddenWeightLoss };

            if (additionalValues != null)
                suddenWeightLossList.AddRange(additionalValues);
            else
                suddenWeightLossList.Add(null);

            if (suddenWeightLossList.Count == 1)
                return queryable.BySuddenWeightLoss(suddenWeightLossList[0]);

            return queryable.BySuddenWeightLoss(suddenWeightLossList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.SuddenWeightLoss"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> BySuddenWeightLoss(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("SuddenWeightLoss", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Weakness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="weakness">Weakness to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByWeakness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string weakness)
        {
            // support nulls
            return weakness == null 
                ? queryable.Where(d => d.Weakness == null) 
                : queryable.Where(d => d.Weakness == weakness);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Weakness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="weakness">Weakness to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByWeakness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string weakness)
        {
            if (weakness == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("weakness", "Parameter 'weakness' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Weakness.Contains(weakness));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Weakness.StartsWith(weakness));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Weakness.EndsWith(weakness));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Weakness.Contains(weakness) == false);
                case ContainmentOperator.NotEquals:
                    return weakness == null 
                        ? queryable.Where(d => d.Weakness != null) 
                        : queryable.Where(d => d.Weakness != weakness);
                default:
                    return weakness == null 
                        ? queryable.Where(d => d.Weakness == null) 
                        : queryable.Where(d => d.Weakness == weakness);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Weakness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="weakness">Weakness to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByWeakness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string weakness, params string[] additionalValues)
        {
            var weaknessList = new List<string> { weakness };

            if (additionalValues != null)
                weaknessList.AddRange(additionalValues);
            else
                weaknessList.Add(null);

            if (weaknessList.Count == 1)
                return queryable.ByWeakness(weaknessList[0]);

            return queryable.ByWeakness(weaknessList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Weakness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByWeakness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Weakness", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyphagia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polyphagia">Polyphagia to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyphagia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string polyphagia)
        {
            // support nulls
            return polyphagia == null 
                ? queryable.Where(d => d.Polyphagia == null) 
                : queryable.Where(d => d.Polyphagia == polyphagia);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyphagia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polyphagia">Polyphagia to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyphagia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string polyphagia)
        {
            if (polyphagia == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("polyphagia", "Parameter 'polyphagia' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Polyphagia.Contains(polyphagia));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Polyphagia.StartsWith(polyphagia));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Polyphagia.EndsWith(polyphagia));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Polyphagia.Contains(polyphagia) == false);
                case ContainmentOperator.NotEquals:
                    return polyphagia == null 
                        ? queryable.Where(d => d.Polyphagia != null) 
                        : queryable.Where(d => d.Polyphagia != polyphagia);
                default:
                    return polyphagia == null 
                        ? queryable.Where(d => d.Polyphagia == null) 
                        : queryable.Where(d => d.Polyphagia == polyphagia);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyphagia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="polyphagia">Polyphagia to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyphagia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string polyphagia, params string[] additionalValues)
        {
            var polyphagiaList = new List<string> { polyphagia };

            if (additionalValues != null)
                polyphagiaList.AddRange(additionalValues);
            else
                polyphagiaList.Add(null);

            if (polyphagiaList.Count == 1)
                return queryable.ByPolyphagia(polyphagiaList[0]);

            return queryable.ByPolyphagia(polyphagiaList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Polyphagia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPolyphagia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Polyphagia", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.GenitalThrush"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="genitalThrush">GenitalThrush to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGenitalThrush(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string genitalThrush)
        {
            // support nulls
            return genitalThrush == null 
                ? queryable.Where(d => d.GenitalThrush == null) 
                : queryable.Where(d => d.GenitalThrush == genitalThrush);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.GenitalThrush"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="genitalThrush">GenitalThrush to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGenitalThrush(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string genitalThrush)
        {
            if (genitalThrush == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("genitalThrush", "Parameter 'genitalThrush' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.GenitalThrush.Contains(genitalThrush));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.GenitalThrush.StartsWith(genitalThrush));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.GenitalThrush.EndsWith(genitalThrush));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.GenitalThrush.Contains(genitalThrush) == false);
                case ContainmentOperator.NotEquals:
                    return genitalThrush == null 
                        ? queryable.Where(d => d.GenitalThrush != null) 
                        : queryable.Where(d => d.GenitalThrush != genitalThrush);
                default:
                    return genitalThrush == null 
                        ? queryable.Where(d => d.GenitalThrush == null) 
                        : queryable.Where(d => d.GenitalThrush == genitalThrush);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.GenitalThrush"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="genitalThrush">GenitalThrush to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGenitalThrush(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string genitalThrush, params string[] additionalValues)
        {
            var genitalThrushList = new List<string> { genitalThrush };

            if (additionalValues != null)
                genitalThrushList.AddRange(additionalValues);
            else
                genitalThrushList.Add(null);

            if (genitalThrushList.Count == 1)
                return queryable.ByGenitalThrush(genitalThrushList[0]);

            return queryable.ByGenitalThrush(genitalThrushList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.GenitalThrush"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByGenitalThrush(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("GenitalThrush", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.VisualBlurring"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="visualBlurring">VisualBlurring to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByVisualBlurring(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string visualBlurring)
        {
            // support nulls
            return visualBlurring == null 
                ? queryable.Where(d => d.VisualBlurring == null) 
                : queryable.Where(d => d.VisualBlurring == visualBlurring);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.VisualBlurring"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="visualBlurring">VisualBlurring to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByVisualBlurring(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string visualBlurring)
        {
            if (visualBlurring == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("visualBlurring", "Parameter 'visualBlurring' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.VisualBlurring.Contains(visualBlurring));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.VisualBlurring.StartsWith(visualBlurring));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.VisualBlurring.EndsWith(visualBlurring));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.VisualBlurring.Contains(visualBlurring) == false);
                case ContainmentOperator.NotEquals:
                    return visualBlurring == null 
                        ? queryable.Where(d => d.VisualBlurring != null) 
                        : queryable.Where(d => d.VisualBlurring != visualBlurring);
                default:
                    return visualBlurring == null 
                        ? queryable.Where(d => d.VisualBlurring == null) 
                        : queryable.Where(d => d.VisualBlurring == visualBlurring);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.VisualBlurring"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="visualBlurring">VisualBlurring to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByVisualBlurring(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string visualBlurring, params string[] additionalValues)
        {
            var visualBlurringList = new List<string> { visualBlurring };

            if (additionalValues != null)
                visualBlurringList.AddRange(additionalValues);
            else
                visualBlurringList.Add(null);

            if (visualBlurringList.Count == 1)
                return queryable.ByVisualBlurring(visualBlurringList[0]);

            return queryable.ByVisualBlurring(visualBlurringList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.VisualBlurring"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByVisualBlurring(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("VisualBlurring", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Itching"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itching">Itching to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByItching(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string itching)
        {
            // support nulls
            return itching == null 
                ? queryable.Where(d => d.Itching == null) 
                : queryable.Where(d => d.Itching == itching);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Itching"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itching">Itching to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByItching(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string itching)
        {
            if (itching == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itching", "Parameter 'itching' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Itching.Contains(itching));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Itching.StartsWith(itching));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Itching.EndsWith(itching));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Itching.Contains(itching) == false);
                case ContainmentOperator.NotEquals:
                    return itching == null 
                        ? queryable.Where(d => d.Itching != null) 
                        : queryable.Where(d => d.Itching != itching);
                default:
                    return itching == null 
                        ? queryable.Where(d => d.Itching == null) 
                        : queryable.Where(d => d.Itching == itching);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Itching"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itching">Itching to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByItching(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string itching, params string[] additionalValues)
        {
            var itchingList = new List<string> { itching };

            if (additionalValues != null)
                itchingList.AddRange(additionalValues);
            else
                itchingList.Add(null);

            if (itchingList.Count == 1)
                return queryable.ByItching(itchingList[0]);

            return queryable.ByItching(itchingList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Itching"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByItching(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Itching", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Irritability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="irritability">Irritability to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByIrritability(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string irritability)
        {
            // support nulls
            return irritability == null 
                ? queryable.Where(d => d.Irritability == null) 
                : queryable.Where(d => d.Irritability == irritability);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Irritability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="irritability">Irritability to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByIrritability(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string irritability)
        {
            if (irritability == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("irritability", "Parameter 'irritability' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Irritability.Contains(irritability));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Irritability.StartsWith(irritability));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Irritability.EndsWith(irritability));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Irritability.Contains(irritability) == false);
                case ContainmentOperator.NotEquals:
                    return irritability == null 
                        ? queryable.Where(d => d.Irritability != null) 
                        : queryable.Where(d => d.Irritability != irritability);
                default:
                    return irritability == null 
                        ? queryable.Where(d => d.Irritability == null) 
                        : queryable.Where(d => d.Irritability == irritability);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Irritability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="irritability">Irritability to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByIrritability(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string irritability, params string[] additionalValues)
        {
            var irritabilityList = new List<string> { irritability };

            if (additionalValues != null)
                irritabilityList.AddRange(additionalValues);
            else
                irritabilityList.Add(null);

            if (irritabilityList.Count == 1)
                return queryable.ByIrritability(irritabilityList[0]);

            return queryable.ByIrritability(irritabilityList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Irritability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByIrritability(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Irritability", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.DelayedHealing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="delayedHealing">DelayedHealing to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByDelayedHealing(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string delayedHealing)
        {
            // support nulls
            return delayedHealing == null 
                ? queryable.Where(d => d.DelayedHealing == null) 
                : queryable.Where(d => d.DelayedHealing == delayedHealing);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.DelayedHealing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="delayedHealing">DelayedHealing to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByDelayedHealing(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string delayedHealing)
        {
            if (delayedHealing == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("delayedHealing", "Parameter 'delayedHealing' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.DelayedHealing.Contains(delayedHealing));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.DelayedHealing.StartsWith(delayedHealing));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.DelayedHealing.EndsWith(delayedHealing));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.DelayedHealing.Contains(delayedHealing) == false);
                case ContainmentOperator.NotEquals:
                    return delayedHealing == null 
                        ? queryable.Where(d => d.DelayedHealing != null) 
                        : queryable.Where(d => d.DelayedHealing != delayedHealing);
                default:
                    return delayedHealing == null 
                        ? queryable.Where(d => d.DelayedHealing == null) 
                        : queryable.Where(d => d.DelayedHealing == delayedHealing);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.DelayedHealing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="delayedHealing">DelayedHealing to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByDelayedHealing(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string delayedHealing, params string[] additionalValues)
        {
            var delayedHealingList = new List<string> { delayedHealing };

            if (additionalValues != null)
                delayedHealingList.AddRange(additionalValues);
            else
                delayedHealingList.Add(null);

            if (delayedHealingList.Count == 1)
                return queryable.ByDelayedHealing(delayedHealingList[0]);

            return queryable.ByDelayedHealing(delayedHealingList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.DelayedHealing"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByDelayedHealing(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("DelayedHealing", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.PartialParesis"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="partialParesis">PartialParesis to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPartialParesis(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string partialParesis)
        {
            // support nulls
            return partialParesis == null 
                ? queryable.Where(d => d.PartialParesis == null) 
                : queryable.Where(d => d.PartialParesis == partialParesis);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.PartialParesis"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="partialParesis">PartialParesis to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPartialParesis(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string partialParesis)
        {
            if (partialParesis == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("partialParesis", "Parameter 'partialParesis' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.PartialParesis.Contains(partialParesis));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.PartialParesis.StartsWith(partialParesis));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.PartialParesis.EndsWith(partialParesis));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.PartialParesis.Contains(partialParesis) == false);
                case ContainmentOperator.NotEquals:
                    return partialParesis == null 
                        ? queryable.Where(d => d.PartialParesis != null) 
                        : queryable.Where(d => d.PartialParesis != partialParesis);
                default:
                    return partialParesis == null 
                        ? queryable.Where(d => d.PartialParesis == null) 
                        : queryable.Where(d => d.PartialParesis == partialParesis);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.PartialParesis"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="partialParesis">PartialParesis to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPartialParesis(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string partialParesis, params string[] additionalValues)
        {
            var partialParesisList = new List<string> { partialParesis };

            if (additionalValues != null)
                partialParesisList.AddRange(additionalValues);
            else
                partialParesisList.Add(null);

            if (partialParesisList.Count == 1)
                return queryable.ByPartialParesis(partialParesisList[0]);

            return queryable.ByPartialParesis(partialParesisList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.PartialParesis"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByPartialParesis(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("PartialParesis", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.MuscleStiffness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="muscleStiffness">MuscleStiffness to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByMuscleStiffness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string muscleStiffness)
        {
            // support nulls
            return muscleStiffness == null 
                ? queryable.Where(d => d.MuscleStiffness == null) 
                : queryable.Where(d => d.MuscleStiffness == muscleStiffness);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.MuscleStiffness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="muscleStiffness">MuscleStiffness to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByMuscleStiffness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string muscleStiffness)
        {
            if (muscleStiffness == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("muscleStiffness", "Parameter 'muscleStiffness' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.MuscleStiffness.Contains(muscleStiffness));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.MuscleStiffness.StartsWith(muscleStiffness));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.MuscleStiffness.EndsWith(muscleStiffness));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.MuscleStiffness.Contains(muscleStiffness) == false);
                case ContainmentOperator.NotEquals:
                    return muscleStiffness == null 
                        ? queryable.Where(d => d.MuscleStiffness != null) 
                        : queryable.Where(d => d.MuscleStiffness != muscleStiffness);
                default:
                    return muscleStiffness == null 
                        ? queryable.Where(d => d.MuscleStiffness == null) 
                        : queryable.Where(d => d.MuscleStiffness == muscleStiffness);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.MuscleStiffness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="muscleStiffness">MuscleStiffness to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByMuscleStiffness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string muscleStiffness, params string[] additionalValues)
        {
            var muscleStiffnessList = new List<string> { muscleStiffness };

            if (additionalValues != null)
                muscleStiffnessList.AddRange(additionalValues);
            else
                muscleStiffnessList.Add(null);

            if (muscleStiffnessList.Count == 1)
                return queryable.ByMuscleStiffness(muscleStiffnessList[0]);

            return queryable.ByMuscleStiffness(muscleStiffnessList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.MuscleStiffness"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByMuscleStiffness(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("MuscleStiffness", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Alopecia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="alopecia">Alopecia to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAlopecia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string alopecia)
        {
            // support nulls
            return alopecia == null 
                ? queryable.Where(d => d.Alopecia == null) 
                : queryable.Where(d => d.Alopecia == alopecia);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Alopecia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="alopecia">Alopecia to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAlopecia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string alopecia)
        {
            if (alopecia == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("alopecia", "Parameter 'alopecia' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Alopecia.Contains(alopecia));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Alopecia.StartsWith(alopecia));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Alopecia.EndsWith(alopecia));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Alopecia.Contains(alopecia) == false);
                case ContainmentOperator.NotEquals:
                    return alopecia == null 
                        ? queryable.Where(d => d.Alopecia != null) 
                        : queryable.Where(d => d.Alopecia != alopecia);
                default:
                    return alopecia == null 
                        ? queryable.Where(d => d.Alopecia == null) 
                        : queryable.Where(d => d.Alopecia == alopecia);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Alopecia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="alopecia">Alopecia to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAlopecia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string alopecia, params string[] additionalValues)
        {
            var alopeciaList = new List<string> { alopecia };

            if (additionalValues != null)
                alopeciaList.AddRange(additionalValues);
            else
                alopeciaList.Add(null);

            if (alopeciaList.Count == 1)
                return queryable.ByAlopecia(alopeciaList[0]);

            return queryable.ByAlopecia(alopeciaList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Alopecia"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAlopecia(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Alopecia", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Obesity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="obesity">Obesity to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByObesity(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string obesity)
        {
            // support nulls
            return obesity == null 
                ? queryable.Where(d => d.Obesity == null) 
                : queryable.Where(d => d.Obesity == obesity);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Obesity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="obesity">Obesity to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByObesity(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string obesity)
        {
            if (obesity == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("obesity", "Parameter 'obesity' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Obesity.Contains(obesity));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Obesity.StartsWith(obesity));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Obesity.EndsWith(obesity));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Obesity.Contains(obesity) == false);
                case ContainmentOperator.NotEquals:
                    return obesity == null 
                        ? queryable.Where(d => d.Obesity != null) 
                        : queryable.Where(d => d.Obesity != obesity);
                default:
                    return obesity == null 
                        ? queryable.Where(d => d.Obesity == null) 
                        : queryable.Where(d => d.Obesity == obesity);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Obesity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="obesity">Obesity to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByObesity(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string obesity, params string[] additionalValues)
        {
            var obesityList = new List<string> { obesity };

            if (additionalValues != null)
                obesityList.AddRange(additionalValues);
            else
                obesityList.Add(null);

            if (obesityList.Count == 1)
                return queryable.ByObesity(obesityList[0]);

            return queryable.ByObesity(obesityList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Obesity"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByObesity(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("Obesity", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Class"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="@class">Class to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByClass(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string @class)
        {
            return queryable.Where(d => d.Class == @class);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Class"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="@class">Class to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByClass(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string @class)
        {
            if (@class == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("@class", "Parameter '@class' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.Class.Contains(@class));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.Class.StartsWith(@class));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.Class.EndsWith(@class));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.Class.Contains(@class) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.Class != @class);
                default:
                    return queryable.Where(d => d.Class == @class);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Class"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="@class">Class to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByClass(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string @class, params string[] additionalValues)
        {
            var @classList = new List<string> { @class };

            if (additionalValues != null)
                @classList.AddRange(additionalValues);

            if (@classList.Count == 1)
                return queryable.ByClass(@classList[0]);

            return queryable.ByClass(@classList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.Class"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByClass(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            return queryable.Where(d => values.Contains(d.Class));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedDate(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, System.DateTime createdDate)
        {
            return queryable.Where(d => d.CreatedDate == createdDate);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedDate(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ComparisonOperator comparisonOperator, System.DateTime createdDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.CreatedDate > createdDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.CreatedDate >= createdDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.CreatedDate < createdDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.CreatedDate <= createdDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(d => d.CreatedDate != createdDate);
                default:
                    return queryable.Where(d => d.CreatedDate == createdDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedDate(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> { createdDate };

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            return queryable.ByCreatedDate(createdDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedDate(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(d => values.Contains(d.CreatedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedBy(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string createdBy)
        {
            return queryable.Where(d => d.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedBy(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ContainmentOperator containmentOperator, string createdBy)
        {
            if (createdBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("createdBy", "Parameter 'createdBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(d => d.CreatedBy.Contains(createdBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(d => d.CreatedBy.StartsWith(createdBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(d => d.CreatedBy.EndsWith(createdBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(d => d.CreatedBy.Contains(createdBy) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(d => d.CreatedBy != createdBy);
                default:
                    return queryable.Where(d => d.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedBy(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, string createdBy, params string[] additionalValues)
        {
            var createdByList = new List<string> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByCreatedBy(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<string> values)
        {
            return queryable.Where(d => values.Contains(d.CreatedBy));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeStart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageStart">AgeStart to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeStart(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, decimal? ageStart)
        {
            // support nulls
            return ageStart == null 
                ? queryable.Where(d => d.AgeStart == null) 
                : queryable.Where(d => d.AgeStart == ageStart);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeStart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageStart">AgeStart to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeStart(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ComparisonOperator comparisonOperator, decimal? ageStart)
        {
            if (ageStart == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("ageStart", "Parameter 'ageStart' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.AgeStart > ageStart);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.AgeStart >= ageStart);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.AgeStart < ageStart);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.AgeStart <= ageStart);
                case ComparisonOperator.NotEquals:
                    return ageStart == null 
                        ? queryable.Where(d => d.AgeStart != null) 
                        : queryable.Where(d => d.AgeStart != ageStart);
                default:
                    return ageStart == null 
                        ? queryable.Where(d => d.AgeStart == null) 
                        : queryable.Where(d => d.AgeStart == ageStart);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeStart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageStart">AgeStart to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeStart(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, decimal? ageStart, params decimal?[] additionalValues)
        {
            var ageStartList = new List<decimal?> { ageStart };

            if (additionalValues != null)
                ageStartList.AddRange(additionalValues);
            else
                ageStartList.Add(null);

            if (ageStartList.Count == 1)
                return queryable.ByAgeStart(ageStartList[0]);

            return queryable.ByAgeStart(ageStartList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeStart"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeStart(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<decimal?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("AgeStart", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeEnd"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageEnd">AgeEnd to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeEnd(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, decimal? ageEnd)
        {
            // support nulls
            return ageEnd == null 
                ? queryable.Where(d => d.AgeEnd == null) 
                : queryable.Where(d => d.AgeEnd == ageEnd);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeEnd"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageEnd">AgeEnd to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeEnd(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, ComparisonOperator comparisonOperator, decimal? ageEnd)
        {
            if (ageEnd == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("ageEnd", "Parameter 'ageEnd' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(d => d.AgeEnd > ageEnd);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(d => d.AgeEnd >= ageEnd);
                case ComparisonOperator.LessThan:
                    return queryable.Where(d => d.AgeEnd < ageEnd);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(d => d.AgeEnd <= ageEnd);
                case ComparisonOperator.NotEquals:
                    return ageEnd == null 
                        ? queryable.Where(d => d.AgeEnd != null) 
                        : queryable.Where(d => d.AgeEnd != ageEnd);
                default:
                    return ageEnd == null 
                        ? queryable.Where(d => d.AgeEnd == null) 
                        : queryable.Where(d => d.AgeEnd == ageEnd);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeEnd"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ageEnd">AgeEnd to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeEnd(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, decimal? ageEnd, params decimal?[] additionalValues)
        {
            var ageEndList = new List<decimal?> { ageEnd };

            if (additionalValues != null)
                ageEndList.AddRange(additionalValues);
            else
                ageEndList.Add(null);

            if (ageEndList.Count == 1)
                return queryable.ByAgeEnd(ageEndList[0]);

            return queryable.ByAgeEnd(ageEndList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.DiabetesRules.AgeEnd"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.DiabetesRules> ByAgeEnd(this IQueryable<ESMEDICAL.Data.DiabetesRules> queryable, IEnumerable<decimal?> values)
        {
            // creating dynamic expression to support nulls
            var expression = DynamicExpression.BuildExpression<ESMEDICAL.Data.DiabetesRules, bool>("AgeEnd", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<ESMEDICAL.Data.EsMedicalDbContext, int, ESMEDICAL.Data.DiabetesRules> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (ESMEDICAL.Data.EsMedicalDbContext db, int id) =>
                        db.DiabetesRules.FirstOrDefault(d => d.Id == id));

        }
        #endregion
    }
}
#pragma warning restore 1591
