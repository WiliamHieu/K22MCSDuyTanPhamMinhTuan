#pragma warning disable 1591
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace ESMEDICAL.Data
{
    /// <summary>
    /// The query extension class for Users.
    /// </summary>
    public static partial class UsersExtensions
    {

        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static ESMEDICAL.Data.Users GetByKey(this IQueryable<ESMEDICAL.Data.Users> queryable, string username)
        {
            var entity = queryable as System.Data.Linq.Table<ESMEDICAL.Data.Users>;
            if (entity != null && entity.Context.LoadOptions == null)
                return Query.GetByKey.Invoke((ESMEDICAL.Data.EsMedicalDbContext)entity.Context, username);

            return queryable.FirstOrDefault(u => u.Username == username);
        }

        /// <summary>
        /// Immediately deletes the entity by the primary key from the underlying data source with a single delete command.
        /// </summary>
        /// <param name="table">Represents a table for a particular type in the underlying database containing rows are to be deleted.</param>
        /// <returns>The number of rows deleted from the database.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static int Delete(this System.Data.Linq.Table<ESMEDICAL.Data.Users> table, string username)
        {
            return table.Delete(u => u.Username == username);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByUsername(this IQueryable<ESMEDICAL.Data.Users> queryable, string username)
        {
            return queryable.Where(u => u.Username == username);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByUsername(this IQueryable<ESMEDICAL.Data.Users> queryable, ContainmentOperator containmentOperator, string username)
        {
            if (username == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("username", "Parameter 'username' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Username.Contains(username));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Username.StartsWith(username));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Username.EndsWith(username));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Username.Contains(username) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.Username != username);
                default:
                    return queryable.Where(u => u.Username == username);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="username">Username to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByUsername(this IQueryable<ESMEDICAL.Data.Users> queryable, string username, params string[] additionalValues)
        {
            var usernameList = new List<string> { username };

            if (additionalValues != null)
                usernameList.AddRange(additionalValues);

            if (usernameList.Count == 1)
                return queryable.ByUsername(usernameList[0]);

            return queryable.ByUsername(usernameList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Username"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByUsername(this IQueryable<ESMEDICAL.Data.Users> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.Username));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByPassword(this IQueryable<ESMEDICAL.Data.Users> queryable, string password)
        {
            return queryable.Where(u => u.Password == password);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByPassword(this IQueryable<ESMEDICAL.Data.Users> queryable, ContainmentOperator containmentOperator, string password)
        {
            if (password == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("password", "Parameter 'password' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Password.Contains(password));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Password.StartsWith(password));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Password.EndsWith(password));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Password.Contains(password) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.Password != password);
                default:
                    return queryable.Where(u => u.Password == password);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByPassword(this IQueryable<ESMEDICAL.Data.Users> queryable, string password, params string[] additionalValues)
        {
            var passwordList = new List<string> { password };

            if (additionalValues != null)
                passwordList.AddRange(additionalValues);

            if (passwordList.Count == 1)
                return queryable.ByPassword(passwordList[0]);

            return queryable.ByPassword(passwordList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByPassword(this IQueryable<ESMEDICAL.Data.Users> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.Password));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByName(this IQueryable<ESMEDICAL.Data.Users> queryable, string name)
        {
            return queryable.Where(u => u.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByName(this IQueryable<ESMEDICAL.Data.Users> queryable, ContainmentOperator containmentOperator, string name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.Name != name);
                default:
                    return queryable.Where(u => u.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByName(this IQueryable<ESMEDICAL.Data.Users> queryable, string name, params string[] additionalValues)
        {
            var nameList = new List<string> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByName(this IQueryable<ESMEDICAL.Data.Users> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByStatus(this IQueryable<ESMEDICAL.Data.Users> queryable, int status)
        {
            return queryable.Where(u => u.Status == status);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByStatus(this IQueryable<ESMEDICAL.Data.Users> queryable, ComparisonOperator comparisonOperator, int status)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.Status > status);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.Status >= status);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.Status < status);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.Status <= status);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.Status != status);
                default:
                    return queryable.Where(u => u.Status == status);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="status">Status to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByStatus(this IQueryable<ESMEDICAL.Data.Users> queryable, int status, params int[] additionalValues)
        {
            var statusList = new List<int> { status };

            if (additionalValues != null)
                statusList.AddRange(additionalValues);

            if (statusList.Count == 1)
                return queryable.ByStatus(statusList[0]);

            return queryable.ByStatus(statusList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.Status"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByStatus(this IQueryable<ESMEDICAL.Data.Users> queryable, IEnumerable<int> values)
        {
            return queryable.Where(u => values.Contains(u.Status));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedDate(this IQueryable<ESMEDICAL.Data.Users> queryable, System.DateTime createdDate)
        {
            return queryable.Where(u => u.CreatedDate == createdDate);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedDate(this IQueryable<ESMEDICAL.Data.Users> queryable, ComparisonOperator comparisonOperator, System.DateTime createdDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(u => u.CreatedDate > createdDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(u => u.CreatedDate >= createdDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(u => u.CreatedDate < createdDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(u => u.CreatedDate <= createdDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(u => u.CreatedDate != createdDate);
                default:
                    return queryable.Where(u => u.CreatedDate == createdDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdDate">CreatedDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedDate(this IQueryable<ESMEDICAL.Data.Users> queryable, System.DateTime createdDate, params System.DateTime[] additionalValues)
        {
            var createdDateList = new List<System.DateTime> { createdDate };

            if (additionalValues != null)
                createdDateList.AddRange(additionalValues);

            if (createdDateList.Count == 1)
                return queryable.ByCreatedDate(createdDateList[0]);

            return queryable.ByCreatedDate(createdDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedDate(this IQueryable<ESMEDICAL.Data.Users> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(u => values.Contains(u.CreatedDate));
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedBy(this IQueryable<ESMEDICAL.Data.Users> queryable, string createdBy)
        {
            return queryable.Where(u => u.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedBy(this IQueryable<ESMEDICAL.Data.Users> queryable, ContainmentOperator containmentOperator, string createdBy)
        {
            if (createdBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("createdBy", "Parameter 'createdBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(u => u.CreatedBy.Contains(createdBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(u => u.CreatedBy.StartsWith(createdBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(u => u.CreatedBy.EndsWith(createdBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(u => u.CreatedBy.Contains(createdBy) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(u => u.CreatedBy != createdBy);
                default:
                    return queryable.Where(u => u.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedBy(this IQueryable<ESMEDICAL.Data.Users> queryable, string createdBy, params string[] additionalValues)
        {
            var createdByList = new List<string> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="ESMEDICAL.Data.Users.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<ESMEDICAL.Data.Users> ByCreatedBy(this IQueryable<ESMEDICAL.Data.Users> queryable, IEnumerable<string> values)
        {
            return queryable.Where(u => values.Contains(u.CreatedBy));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
            internal static readonly Func<ESMEDICAL.Data.EsMedicalDbContext, string, ESMEDICAL.Data.Users> GetByKey =
                System.Data.Linq.CompiledQuery.Compile(
                    (ESMEDICAL.Data.EsMedicalDbContext db, string username) =>
                        db.Users.FirstOrDefault(u => u.Username == username));

        }
        #endregion
    }
}
#pragma warning restore 1591
